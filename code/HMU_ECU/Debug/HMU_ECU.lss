
HMU_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000035f2  00003686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  008000f6  008000f6  0000371c  2**0
                  ALLOC
  3 .stab         000033cc  00000000  00000000  0000371c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013dd  00000000  00000000  00006ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008005  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008175  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ba58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000be45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 72 18 	jmp	0x30e4	; 0x30e4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 30       	cpi	r26, 0x08	; 8
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1b 08 	call	0x1036	; 0x1036 <main>
      8a:	0c 94 f7 1a 	jmp	0x35ee	; 0x35ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ee       	ldi	r26, 0xE0	; 224
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ee       	ldi	r24, 0xE0	; 224
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 87 1a 	jmp	0x350e	; 0x350e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <First_Error_Message>:
Timer1_ConfigType Config={0,7813,Prescalar_1024,CTC_Mode};




void First_Error_Message(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	count++;
     b4e:	80 91 01 01 	lds	r24, 0x0101
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 01 01 	sts	0x0101, r24
	freeze=1;
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 f6 00 	sts	0x00F6, r24
	if(count ==14){
     b5e:	80 91 01 01 	lds	r24, 0x0101
     b62:	8e 30       	cpi	r24, 0x0E	; 14
     b64:	31 f4       	brne	.+12     	; 0xb72 <First_Error_Message+0x2c>
		freeze=0;
     b66:	10 92 f6 00 	sts	0x00F6, r1
		count=0;
     b6a:	10 92 01 01 	sts	0x0101, r1
		Timer1_deInit();
     b6e:	0e 94 18 18 	call	0x3030	; 0x3030 <Timer1_deInit>
	}
}
     b72:	cf 91       	pop	r28
     b74:	df 91       	pop	r29
     b76:	08 95       	ret

00000b78 <First_Display>:


void First_Display(void){
     b78:	df 93       	push	r29
     b7a:	cf 93       	push	r28
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     b80:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Plz enter pass:");
     b84:	20 e6       	ldi	r18, 0x60	; 96
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	a9 01       	movw	r20, r18
     b8e:	0e 94 6e 17 	call	0x2edc	; 0x2edc <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <LCD_moveCursor>
}
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <Reenter_Display>:



void Reenter_Display(void){
     ba0:	df 93       	push	r29
     ba2:	cf 93       	push	r28
     ba4:	cd b7       	in	r28, 0x3d	; 61
     ba6:	de b7       	in	r29, 0x3e	; 62
	LCD_displayStringRowColumn(0,0,"Plz re-enter pass:");
     ba8:	20 e7       	ldi	r18, 0x70	; 112
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	60 e0       	ldi	r22, 0x00	; 0
     bb0:	a9 01       	movw	r20, r18
     bb2:	0e 94 6e 17 	call	0x2edc	; 0x2edc <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"Same Pass:");
     bb6:	23 e8       	ldi	r18, 0x83	; 131
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	a9 01       	movw	r20, r18
     bc0:	0e 94 6e 17 	call	0x2edc	; 0x2edc <LCD_displayStringRowColumn>
}
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <GetPass>:



void GetPass(uint8 Ptr[]){
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	61 97       	sbiw	r28, 0x11	; 17
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	de bf       	out	0x3e, r29	; 62
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	cd bf       	out	0x3d, r28	; 61
     bde:	99 8b       	std	Y+17, r25	; 0x11
     be0:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 counter=0;counter<5;counter++){
     be2:	1f 86       	std	Y+15, r1	; 0x0f
     be4:	90 c0       	rjmp	.+288    	; 0xd06 <GetPass+0x13c>
			key=KEYPAD_getPressedKey();
     be6:	0e 94 19 0c 	call	0x1832	; 0x1832 <KEYPAD_getPressedKey>
     bea:	80 93 07 01 	sts	0x0107, r24
			if((key <= 9) && (key >= 0)){
     bee:	80 91 07 01 	lds	r24, 0x0107
     bf2:	8a 30       	cpi	r24, 0x0A	; 10
     bf4:	08 f0       	brcs	.+2      	; 0xbf8 <GetPass+0x2e>
     bf6:	81 c0       	rjmp	.+258    	; 0xcfa <GetPass+0x130>
				Ptr[counter]=key;
     bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bfa:	28 2f       	mov	r18, r24
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	88 89       	ldd	r24, Y+16	; 0x10
     c00:	99 89       	ldd	r25, Y+17	; 0x11
     c02:	fc 01       	movw	r30, r24
     c04:	e2 0f       	add	r30, r18
     c06:	f3 1f       	adc	r31, r19
     c08:	80 91 07 01 	lds	r24, 0x0107
     c0c:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
     c0e:	8a e2       	ldi	r24, 0x2A	; 42
     c10:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_displayCharacter>
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	aa e7       	ldi	r26, 0x7A	; 122
     c1a:	b3 e4       	ldi	r27, 0x43	; 67
     c1c:	8b 87       	std	Y+11, r24	; 0x0b
     c1e:	9c 87       	std	Y+12, r25	; 0x0c
     c20:	ad 87       	std	Y+13, r26	; 0x0d
     c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c24:	6b 85       	ldd	r22, Y+11	; 0x0b
     c26:	7c 85       	ldd	r23, Y+12	; 0x0c
     c28:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	4a ef       	ldi	r20, 0xFA	; 250
     c32:	54 e4       	ldi	r21, 0x44	; 68
     c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	8f 83       	std	Y+7, r24	; 0x07
     c3e:	98 87       	std	Y+8, r25	; 0x08
     c40:	a9 87       	std	Y+9, r26	; 0x09
     c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c44:	6f 81       	ldd	r22, Y+7	; 0x07
     c46:	78 85       	ldd	r23, Y+8	; 0x08
     c48:	89 85       	ldd	r24, Y+9	; 0x09
     c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e8       	ldi	r20, 0x80	; 128
     c52:	5f e3       	ldi	r21, 0x3F	; 63
     c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c58:	88 23       	and	r24, r24
     c5a:	2c f4       	brge	.+10     	; 0xc66 <GetPass+0x9c>
		__ticks = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	9e 83       	std	Y+6, r25	; 0x06
     c62:	8d 83       	std	Y+5, r24	; 0x05
     c64:	3f c0       	rjmp	.+126    	; 0xce4 <GetPass+0x11a>
	else if (__tmp > 65535)
     c66:	6f 81       	ldd	r22, Y+7	; 0x07
     c68:	78 85       	ldd	r23, Y+8	; 0x08
     c6a:	89 85       	ldd	r24, Y+9	; 0x09
     c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	3f ef       	ldi	r19, 0xFF	; 255
     c72:	4f e7       	ldi	r20, 0x7F	; 127
     c74:	57 e4       	ldi	r21, 0x47	; 71
     c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c7a:	18 16       	cp	r1, r24
     c7c:	4c f5       	brge	.+82     	; 0xcd0 <GetPass+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c80:	7c 85       	ldd	r23, Y+12	; 0x0c
     c82:	8d 85       	ldd	r24, Y+13	; 0x0d
     c84:	9e 85       	ldd	r25, Y+14	; 0x0e
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e2       	ldi	r20, 0x20	; 32
     c8c:	51 e4       	ldi	r21, 0x41	; 65
     c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	9e 83       	std	Y+6, r25	; 0x06
     ca4:	8d 83       	std	Y+5, r24	; 0x05
     ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <GetPass+0xfc>
     ca8:	88 ec       	ldi	r24, 0xC8	; 200
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	9c 83       	std	Y+4, r25	; 0x04
     cae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <GetPass+0xea>
     cb8:	9c 83       	std	Y+4, r25	; 0x04
     cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cbc:	8d 81       	ldd	r24, Y+5	; 0x05
     cbe:	9e 81       	ldd	r25, Y+6	; 0x06
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	9e 83       	std	Y+6, r25	; 0x06
     cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	69 f7       	brne	.-38     	; 0xca8 <GetPass+0xde>
     cce:	18 c0       	rjmp	.+48     	; 0xd00 <GetPass+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd0:	6f 81       	ldd	r22, Y+7	; 0x07
     cd2:	78 85       	ldd	r23, Y+8	; 0x08
     cd4:	89 85       	ldd	r24, Y+9	; 0x09
     cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	9e 83       	std	Y+6, r25	; 0x06
     ce2:	8d 83       	std	Y+5, r24	; 0x05
     ce4:	8d 81       	ldd	r24, Y+5	; 0x05
     ce6:	9e 81       	ldd	r25, Y+6	; 0x06
     ce8:	9a 83       	std	Y+2, r25	; 0x02
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <GetPass+0x126>
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	03 c0       	rjmp	.+6      	; 0xd00 <GetPass+0x136>
				_delay_ms(250);
			}
			else{
				counter--;
     cfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     cfc:	81 50       	subi	r24, 0x01	; 1
     cfe:	8f 87       	std	Y+15, r24	; 0x0f
}



void GetPass(uint8 Ptr[]){
	for(uint8 counter=0;counter<5;counter++){
     d00:	8f 85       	ldd	r24, Y+15	; 0x0f
     d02:	8f 5f       	subi	r24, 0xFF	; 255
     d04:	8f 87       	std	Y+15, r24	; 0x0f
     d06:	8f 85       	ldd	r24, Y+15	; 0x0f
     d08:	85 30       	cpi	r24, 0x05	; 5
     d0a:	08 f4       	brcc	.+2      	; 0xd0e <GetPass+0x144>
     d0c:	6c cf       	rjmp	.-296    	; 0xbe6 <GetPass+0x1c>
			}
			else{
				counter--;
			}
		}
}
     d0e:	61 96       	adiw	r28, 0x11	; 17
     d10:	0f b6       	in	r0, 0x3f	; 63
     d12:	f8 94       	cli
     d14:	de bf       	out	0x3e, r29	; 62
     d16:	0f be       	out	0x3f, r0	; 63
     d18:	cd bf       	out	0x3d, r28	; 61
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <Send_Password>:


void Send_Password(uint8 Ptr[]){
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	00 d0       	rcall	.+0      	; 0xd26 <Send_Password+0x6>
     d26:	0f 92       	push	r0
     d28:	cd b7       	in	r28, 0x3d	; 61
     d2a:	de b7       	in	r29, 0x3e	; 62
     d2c:	9b 83       	std	Y+3, r25	; 0x03
     d2e:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 counter=0;counter<5;counter++){
     d30:	19 82       	std	Y+1, r1	; 0x01
     d32:	0e c0       	rjmp	.+28     	; 0xd50 <Send_Password+0x30>
			UART_sendByte(Ptr[counter]);
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	9b 81       	ldd	r25, Y+3	; 0x03
     d3e:	fc 01       	movw	r30, r24
     d40:	e2 0f       	add	r30, r18
     d42:	f3 1f       	adc	r31, r19
     d44:	80 81       	ld	r24, Z
     d46:	0e 94 c7 19 	call	0x338e	; 0x338e <UART_sendByte>
		}
}


void Send_Password(uint8 Ptr[]){
	for(uint8 counter=0;counter<5;counter++){
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	8f 5f       	subi	r24, 0xFF	; 255
     d4e:	89 83       	std	Y+1, r24	; 0x01
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	85 30       	cpi	r24, 0x05	; 5
     d54:	78 f3       	brcs	.-34     	; 0xd34 <Send_Password+0x14>
			UART_sendByte(Ptr[counter]);
		}
}
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	cf 91       	pop	r28
     d5e:	df 91       	pop	r29
     d60:	08 95       	ret

00000d62 <Wait_For_EnterKey>:


void Wait_For_EnterKey(){
     d62:	df 93       	push	r29
     d64:	cf 93       	push	r28
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	04 c0       	rjmp	.+8      	; 0xd74 <Wait_For_EnterKey+0x12>
	while(key!=13){
			key=KEYPAD_getPressedKey();
     d6c:	0e 94 19 0c 	call	0x1832	; 0x1832 <KEYPAD_getPressedKey>
     d70:	80 93 07 01 	sts	0x0107, r24
		}
}


void Wait_For_EnterKey(){
	while(key!=13){
     d74:	80 91 07 01 	lds	r24, 0x0107
     d78:	8d 30       	cpi	r24, 0x0D	; 13
     d7a:	c1 f7       	brne	.-16     	; 0xd6c <Wait_For_EnterKey+0xa>
			key=KEYPAD_getPressedKey();
	}
}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <Check_Password>:


void Check_Password(){
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	First_Display();
     d8a:	0e 94 bc 05 	call	0xb78	; 0xb78 <First_Display>
	GetPass(PasswordConfirm);
     d8e:	8c ef       	ldi	r24, 0xFC	; 252
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 e5 05 	call	0xbca	; 0xbca <GetPass>
	Wait_For_EnterKey();
     d96:	0e 94 b1 06 	call	0xd62	; 0xd62 <Wait_For_EnterKey>
	Send_Password(PasswordConfirm);
     d9a:	8c ef       	ldi	r24, 0xFC	; 252
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 90 06 	call	0xd20	; 0xd20 <Send_Password>
}
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	08 95       	ret

00000da8 <New_Password>:



void New_Password(){
     da8:	df 93       	push	r29
     daa:	cf 93       	push	r28
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	2e 97       	sbiw	r28, 0x0e	; 14
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
	First_Display();
     dbc:	0e 94 bc 05 	call	0xb78	; 0xb78 <First_Display>
	GetPass(Password);
     dc0:	87 ef       	ldi	r24, 0xF7	; 247
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 e5 05 	call	0xbca	; 0xbca <GetPass>
	Wait_For_EnterKey();
     dc8:	0e 94 b1 06 	call	0xd62	; 0xd62 <Wait_For_EnterKey>

	Reenter_Display();
     dcc:	0e 94 d0 05 	call	0xba0	; 0xba0 <Reenter_Display>
	GetPass(PasswordConfirm);
     dd0:	8c ef       	ldi	r24, 0xFC	; 252
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 e5 05 	call	0xbca	; 0xbca <GetPass>
	Wait_For_EnterKey();
     dd8:	0e 94 b1 06 	call	0xd62	; 0xd62 <Wait_For_EnterKey>

	Send_Password(Password);
     ddc:	87 ef       	ldi	r24, 0xF7	; 247
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 90 06 	call	0xd20	; 0xd20 <Send_Password>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	a0 e2       	ldi	r26, 0x20	; 32
     dea:	b1 e4       	ldi	r27, 0x41	; 65
     dec:	8b 87       	std	Y+11, r24	; 0x0b
     dee:	9c 87       	std	Y+12, r25	; 0x0c
     df0:	ad 87       	std	Y+13, r26	; 0x0d
     df2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df4:	6b 85       	ldd	r22, Y+11	; 0x0b
     df6:	7c 85       	ldd	r23, Y+12	; 0x0c
     df8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dfa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	4a ef       	ldi	r20, 0xFA	; 250
     e02:	54 e4       	ldi	r21, 0x44	; 68
     e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	8f 83       	std	Y+7, r24	; 0x07
     e0e:	98 87       	std	Y+8, r25	; 0x08
     e10:	a9 87       	std	Y+9, r26	; 0x09
     e12:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	40 e8       	ldi	r20, 0x80	; 128
     e22:	5f e3       	ldi	r21, 0x3F	; 63
     e24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e28:	88 23       	and	r24, r24
     e2a:	2c f4       	brge	.+10     	; 0xe36 <New_Password+0x8e>
		__ticks = 1;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	9e 83       	std	Y+6, r25	; 0x06
     e32:	8d 83       	std	Y+5, r24	; 0x05
     e34:	3f c0       	rjmp	.+126    	; 0xeb4 <New_Password+0x10c>
	else if (__tmp > 65535)
     e36:	6f 81       	ldd	r22, Y+7	; 0x07
     e38:	78 85       	ldd	r23, Y+8	; 0x08
     e3a:	89 85       	ldd	r24, Y+9	; 0x09
     e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	4f e7       	ldi	r20, 0x7F	; 127
     e44:	57 e4       	ldi	r21, 0x47	; 71
     e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e4a:	18 16       	cp	r1, r24
     e4c:	4c f5       	brge	.+82     	; 0xea0 <New_Password+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e50:	7c 85       	ldd	r23, Y+12	; 0x0c
     e52:	8d 85       	ldd	r24, Y+13	; 0x0d
     e54:	9e 85       	ldd	r25, Y+14	; 0x0e
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e2       	ldi	r20, 0x20	; 32
     e5c:	51 e4       	ldi	r21, 0x41	; 65
     e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	bc 01       	movw	r22, r24
     e68:	cd 01       	movw	r24, r26
     e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	9e 83       	std	Y+6, r25	; 0x06
     e74:	8d 83       	std	Y+5, r24	; 0x05
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <New_Password+0xee>
     e78:	88 ec       	ldi	r24, 0xC8	; 200
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	9c 83       	std	Y+4, r25	; 0x04
     e7e:	8b 83       	std	Y+3, r24	; 0x03
     e80:	8b 81       	ldd	r24, Y+3	; 0x03
     e82:	9c 81       	ldd	r25, Y+4	; 0x04
     e84:	01 97       	sbiw	r24, 0x01	; 1
     e86:	f1 f7       	brne	.-4      	; 0xe84 <New_Password+0xdc>
     e88:	9c 83       	std	Y+4, r25	; 0x04
     e8a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	69 f7       	brne	.-38     	; 0xe78 <New_Password+0xd0>
     e9e:	14 c0       	rjmp	.+40     	; 0xec8 <New_Password+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea0:	6f 81       	ldd	r22, Y+7	; 0x07
     ea2:	78 85       	ldd	r23, Y+8	; 0x08
     ea4:	89 85       	ldd	r24, Y+9	; 0x09
     ea6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	9e 83       	std	Y+6, r25	; 0x06
     eb2:	8d 83       	std	Y+5, r24	; 0x05
     eb4:	8d 81       	ldd	r24, Y+5	; 0x05
     eb6:	9e 81       	ldd	r25, Y+6	; 0x06
     eb8:	9a 83       	std	Y+2, r25	; 0x02
     eba:	89 83       	std	Y+1, r24	; 0x01
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	9a 81       	ldd	r25, Y+2	; 0x02
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <New_Password+0x118>
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	Send_Password(PasswordConfirm);
     ec8:	8c ef       	ldi	r24, 0xFC	; 252
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 90 06 	call	0xd20	; 0xd20 <Send_Password>
}
     ed0:	2e 96       	adiw	r28, 0x0e	; 14
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <UnLock_Door>:




void UnLock_Door(){
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	count++;
     eea:	80 91 02 01 	lds	r24, 0x0102
     eee:	8f 5f       	subi	r24, 0xFF	; 255
     ef0:	80 93 02 01 	sts	0x0102, r24
	if(count==14){
     ef4:	80 91 02 01 	lds	r24, 0x0102
     ef8:	8e 30       	cpi	r24, 0x0E	; 14
     efa:	31 f4       	brne	.+12     	; 0xf08 <UnLock_Door+0x26>
	count=0;
     efc:	10 92 02 01 	sts	0x0102, r1
	freeze=0;
     f00:	10 92 f6 00 	sts	0x00F6, r1
	Timer1_deInit();
     f04:	0e 94 18 18 	call	0x3030	; 0x3030 <Timer1_deInit>
	}
}
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <Freeze_Door>:




void Freeze_Door(){
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	count++;
     f16:	80 91 03 01 	lds	r24, 0x0103
     f1a:	8f 5f       	subi	r24, 0xFF	; 255
     f1c:	80 93 03 01 	sts	0x0103, r24
	if(count==2){
     f20:	80 91 03 01 	lds	r24, 0x0103
     f24:	82 30       	cpi	r24, 0x02	; 2
     f26:	31 f4       	brne	.+12     	; 0xf34 <Freeze_Door+0x26>
		count=0;
     f28:	10 92 03 01 	sts	0x0103, r1
		freeze=0;
     f2c:	10 92 f6 00 	sts	0x00F6, r1
		Timer1_deInit();
     f30:	0e 94 18 18 	call	0x3030	; 0x3030 <Timer1_deInit>
	}
}
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <Wait_FreezeEnd>:


void Wait_FreezeEnd(){
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
	freeze=1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 f6 00 	sts	0x00F6, r24
	while(freeze);
     f48:	80 91 f6 00 	lds	r24, 0x00F6
     f4c:	88 23       	and	r24, r24
     f4e:	e1 f7       	brne	.-8      	; 0xf48 <Wait_FreezeEnd+0xe>
}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	08 95       	ret

00000f56 <OpenDoor>:



void OpenDoor(){
     f56:	df 93       	push	r29
     f58:	cf 93       	push	r28
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     f5e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <LCD_clearScreen>
	Timer1_init(&Config);
     f62:	88 ee       	ldi	r24, 0xE8	; 232
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <Timer1_init>
	Timer1_setCallBack(&UnLock_Door);
     f6a:	81 e7       	ldi	r24, 0x71	; 113
     f6c:	97 e0       	ldi	r25, 0x07	; 7
     f6e:	0e 94 29 18 	call	0x3052	; 0x3052 <Timer1_setCallBack>
	LCD_displayStringRowColumn(0,0,"Door is Unlocking");
     f72:	2e e8       	ldi	r18, 0x8E	; 142
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	a9 01       	movw	r20, r18
     f7c:	0e 94 6e 17 	call	0x2edc	; 0x2edc <LCD_displayStringRowColumn>
	Wait_FreezeEnd();
     f80:	0e 94 9d 07 	call	0xf3a	; 0xf3a <Wait_FreezeEnd>

	LCD_clearScreen();
     f84:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <LCD_clearScreen>
	Timer1_init(&Config);
     f88:	88 ee       	ldi	r24, 0xE8	; 232
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <Timer1_init>
	Timer1_setCallBack(&Freeze_Door);
     f90:	87 e8       	ldi	r24, 0x87	; 135
     f92:	97 e0       	ldi	r25, 0x07	; 7
     f94:	0e 94 29 18 	call	0x3052	; 0x3052 <Timer1_setCallBack>
	LCD_displayStringRowColumn(0,0,"Holding");
     f98:	20 ea       	ldi	r18, 0xA0	; 160
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	a9 01       	movw	r20, r18
     fa2:	0e 94 6e 17 	call	0x2edc	; 0x2edc <LCD_displayStringRowColumn>
	Wait_FreezeEnd();
     fa6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <Wait_FreezeEnd>

	LCD_clearScreen();
     faa:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <LCD_clearScreen>
	Timer1_init(&Config);
     fae:	88 ee       	ldi	r24, 0xE8	; 232
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <Timer1_init>
	Timer1_setCallBack(&UnLock_Door);
     fb6:	81 e7       	ldi	r24, 0x71	; 113
     fb8:	97 e0       	ldi	r25, 0x07	; 7
     fba:	0e 94 29 18 	call	0x3052	; 0x3052 <Timer1_setCallBack>
	LCD_displayStringRowColumn(0,0,"Door is Locking");
     fbe:	28 ea       	ldi	r18, 0xA8	; 168
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	a9 01       	movw	r20, r18
     fc8:	0e 94 6e 17 	call	0x2edc	; 0x2edc <LCD_displayStringRowColumn>
	Wait_FreezeEnd();
     fcc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <Wait_FreezeEnd>
}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <View_Error>:




void View_Error(){
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
	static uint8 count=0;
	count++;
     fde:	80 91 04 01 	lds	r24, 0x0104
     fe2:	8f 5f       	subi	r24, 0xFF	; 255
     fe4:	80 93 04 01 	sts	0x0104, r24
	if(count==59){
     fe8:	80 91 04 01 	lds	r24, 0x0104
     fec:	8b 33       	cpi	r24, 0x3B	; 59
     fee:	31 f4       	brne	.+12     	; 0xffc <View_Error+0x26>
		count=0;
     ff0:	10 92 04 01 	sts	0x0104, r1
		freeze=0;
     ff4:	10 92 f6 00 	sts	0x00F6, r1
		Timer1_deInit();
     ff8:	0e 94 18 18 	call	0x3030	; 0x3030 <Timer1_deInit>
	}
}
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <Error_And_Input>:




void Error_And_Input(){
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    100a:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <LCD_clearScreen>
	Timer1_init(&Config);
    100e:	88 ee       	ldi	r24, 0xE8	; 232
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <Timer1_init>
	Timer1_setCallBack(&View_Error);
    1016:	8b ee       	ldi	r24, 0xEB	; 235
    1018:	97 e0       	ldi	r25, 0x07	; 7
    101a:	0e 94 29 18 	call	0x3052	; 0x3052 <Timer1_setCallBack>
	LCD_displayStringRowColumn(0,0,"ERROR!!");
    101e:	28 eb       	ldi	r18, 0xB8	; 184
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	a9 01       	movw	r20, r18
    1028:	0e 94 6e 17 	call	0x2edc	; 0x2edc <LCD_displayStringRowColumn>
	Wait_FreezeEnd();
    102c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <Wait_FreezeEnd>
}
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <main>:
 *
 *******************************************************************************/
#include "HMU_ECU.h"


int main(){
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	64 97       	sbiw	r28, 0x14	; 20
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61


	SET_BIT(SREG,7);
    104a:	af e5       	ldi	r26, 0x5F	; 95
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ef e5       	ldi	r30, 0x5F	; 95
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	80 68       	ori	r24, 0x80	; 128
    1056:	8c 93       	st	X, r24
	UART_ConfigType UartConfig={Eight_Bit,Disabled,One_Bit,9600};
    1058:	ce 01       	movw	r24, r28
    105a:	09 96       	adiw	r24, 0x09	; 9
    105c:	99 8b       	std	Y+17, r25	; 0x11
    105e:	88 8b       	std	Y+16, r24	; 0x10
    1060:	ee ee       	ldi	r30, 0xEE	; 238
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	fb 8b       	std	Y+19, r31	; 0x13
    1066:	ea 8b       	std	Y+18, r30	; 0x12
    1068:	f7 e0       	ldi	r31, 0x07	; 7
    106a:	fc 8b       	std	Y+20, r31	; 0x14
    106c:	ea 89       	ldd	r30, Y+18	; 0x12
    106e:	fb 89       	ldd	r31, Y+19	; 0x13
    1070:	00 80       	ld	r0, Z
    1072:	8a 89       	ldd	r24, Y+18	; 0x12
    1074:	9b 89       	ldd	r25, Y+19	; 0x13
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	9b 8b       	std	Y+19, r25	; 0x13
    107a:	8a 8b       	std	Y+18, r24	; 0x12
    107c:	e8 89       	ldd	r30, Y+16	; 0x10
    107e:	f9 89       	ldd	r31, Y+17	; 0x11
    1080:	00 82       	st	Z, r0
    1082:	88 89       	ldd	r24, Y+16	; 0x10
    1084:	99 89       	ldd	r25, Y+17	; 0x11
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	99 8b       	std	Y+17, r25	; 0x11
    108a:	88 8b       	std	Y+16, r24	; 0x10
    108c:	9c 89       	ldd	r25, Y+20	; 0x14
    108e:	91 50       	subi	r25, 0x01	; 1
    1090:	9c 8b       	std	Y+20, r25	; 0x14
    1092:	ec 89       	ldd	r30, Y+20	; 0x14
    1094:	ee 23       	and	r30, r30
    1096:	51 f7       	brne	.-44     	; 0x106c <main+0x36>


	UART_init(&UartConfig);
    1098:	ce 01       	movw	r24, r28
    109a:	09 96       	adiw	r24, 0x09	; 9
    109c:	0e 94 a9 18 	call	0x3152	; 0x3152 <UART_init>
	LCD_init();
    10a0:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <LCD_init>

	while(UART_recieveByte()!=CONTROL_READY);
    10a4:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_recieveByte>
    10a8:	80 34       	cpi	r24, 0x40	; 64
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <main+0x6e>

		UART_sendByte(REG_PASSWORD);
    10ac:	80 e1       	ldi	r24, 0x10	; 16
    10ae:	0e 94 c7 19 	call	0x338e	; 0x338e <UART_sendByte>
 		uint8 order=UART_recieveByte();
    10b2:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_recieveByte>
    10b6:	88 87       	std	Y+8, r24	; 0x08

		if(order==PASSWORD_COMFIRM){
    10b8:	88 85       	ldd	r24, Y+8	; 0x08
    10ba:	85 31       	cpi	r24, 0x15	; 21
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <main+0x8a>
    10be:	65 c0       	rjmp	.+202    	; 0x118a <main+0x154>
			uint8 key2='a';
    10c0:	81 e6       	ldi	r24, 0x61	; 97
    10c2:	8f 83       	std	Y+7, r24	; 0x07
			 LCD_clearScreen();
    10c4:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <LCD_clearScreen>
			 LCD_displayStringRowColumn(0,0,"+  : Open Door");
    10c8:	20 ec       	ldi	r18, 0xC0	; 192
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	60 e0       	ldi	r22, 0x00	; 0
    10d0:	a9 01       	movw	r20, r18
    10d2:	0e 94 6e 17 	call	0x2edc	; 0x2edc <LCD_displayStringRowColumn>
			 LCD_displayStringRowColumn(1,0,"-  : Change Pass");
    10d6:	2f ec       	ldi	r18, 0xCF	; 207
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	0e 94 6e 17 	call	0x2edc	; 0x2edc <LCD_displayStringRowColumn>
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <main+0xb6>
			while(key2!='+' && key2!='-'){
				key2=KEYPAD_getPressedKey();
    10e6:	0e 94 19 0c 	call	0x1832	; 0x1832 <KEYPAD_getPressedKey>
    10ea:	8f 83       	std	Y+7, r24	; 0x07
		if(order==PASSWORD_COMFIRM){
			uint8 key2='a';
			 LCD_clearScreen();
			 LCD_displayStringRowColumn(0,0,"+  : Open Door");
			 LCD_displayStringRowColumn(1,0,"-  : Change Pass");
			while(key2!='+' && key2!='-'){
    10ec:	8f 81       	ldd	r24, Y+7	; 0x07
    10ee:	8b 32       	cpi	r24, 0x2B	; 43
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <main+0xc2>
    10f2:	8f 81       	ldd	r24, Y+7	; 0x07
    10f4:	8d 32       	cpi	r24, 0x2D	; 45
    10f6:	b9 f7       	brne	.-18     	; 0x10e6 <main+0xb0>
				key2=KEYPAD_getPressedKey();
			}


			uint8 try_again=3;
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	8e 83       	std	Y+6, r24	; 0x06
			uint8 answer;
			do{
			try_again--;
    10fc:	8e 81       	ldd	r24, Y+6	; 0x06
    10fe:	81 50       	subi	r24, 0x01	; 1
    1100:	8e 83       	std	Y+6, r24	; 0x06
			UART_sendByte(CHECKPASSWORD);
    1102:	80 e2       	ldi	r24, 0x20	; 32
    1104:	0e 94 c7 19 	call	0x338e	; 0x338e <UART_sendByte>
			Check_Password();
    1108:	0e 94 c1 06 	call	0xd82	; 0xd82 <Check_Password>
			answer=UART_recieveByte();
    110c:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_recieveByte>
    1110:	8d 83       	std	Y+5, r24	; 0x05
			}
			while(try_again>0 && answer!=SAVEDPASSWORD);
    1112:	8e 81       	ldd	r24, Y+6	; 0x06
    1114:	88 23       	and	r24, r24
    1116:	19 f0       	breq	.+6      	; 0x111e <main+0xe8>
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	83 31       	cpi	r24, 0x13	; 19
    111c:	79 f7       	brne	.-34     	; 0x10fc <main+0xc6>

			if(try_again==0 && answer==SAVEDPASSWORD){
    111e:	8e 81       	ldd	r24, Y+6	; 0x06
    1120:	88 23       	and	r24, r24
    1122:	29 f4       	brne	.+10     	; 0x112e <main+0xf8>
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	83 31       	cpi	r24, 0x13	; 19
    1128:	11 f4       	brne	.+4      	; 0x112e <main+0xf8>
				try_again=3;
    112a:	83 e0       	ldi	r24, 0x03	; 3
    112c:	8e 83       	std	Y+6, r24	; 0x06
			}

			if(key2=='+' &&try_again>0){
    112e:	8f 81       	ldd	r24, Y+7	; 0x07
    1130:	8b 32       	cpi	r24, 0x2B	; 43
    1132:	79 f4       	brne	.+30     	; 0x1152 <main+0x11c>
    1134:	8e 81       	ldd	r24, Y+6	; 0x06
    1136:	88 23       	and	r24, r24
    1138:	61 f0       	breq	.+24     	; 0x1152 <main+0x11c>

				UART_sendByte(ROTATE_MOTOR);
    113a:	80 e3       	ldi	r24, 0x30	; 48
    113c:	0e 94 c7 19 	call	0x338e	; 0x338e <UART_sendByte>
				OpenDoor();
    1140:	0e 94 ab 07 	call	0xf56	; 0xf56 <OpenDoor>

				uint8 answerOfMotor;
				do{

				  answerOfMotor=UART_recieveByte();
    1144:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_recieveByte>
    1148:	8c 83       	std	Y+4, r24	; 0x04
				}while(answerOfMotor!=ROTATE_MOTOR);
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	80 33       	cpi	r24, 0x30	; 48
    114e:	d1 f7       	brne	.-12     	; 0x1144 <main+0x10e>
    1150:	27 c0       	rjmp	.+78     	; 0x11a0 <main+0x16a>
			}


			else if (key2=='-'&&try_again>0){
    1152:	8f 81       	ldd	r24, Y+7	; 0x07
    1154:	8d 32       	cpi	r24, 0x2D	; 45
    1156:	69 f4       	brne	.+26     	; 0x1172 <main+0x13c>
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	88 23       	and	r24, r24
    115c:	51 f0       	breq	.+20     	; 0x1172 <main+0x13c>

				UART_sendByte(EREASEPASSWORD);
    115e:	81 e2       	ldi	r24, 0x21	; 33
    1160:	0e 94 c7 19 	call	0x338e	; 0x338e <UART_sendByte>
				uint8 answerOfDeletedPassword;
				do{

					answerOfDeletedPassword =UART_recieveByte();
    1164:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_recieveByte>
    1168:	8b 83       	std	Y+3, r24	; 0x03
				}while(answerOfDeletedPassword!=EREASEPASSWORD);
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	81 32       	cpi	r24, 0x21	; 33
    116e:	d1 f7       	brne	.-12     	; 0x1164 <main+0x12e>
    1170:	17 c0       	rjmp	.+46     	; 0x11a0 <main+0x16a>
			}


			else{

				UART_sendByte(OPENBUZZER);
    1172:	85 e2       	ldi	r24, 0x25	; 37
    1174:	0e 94 c7 19 	call	0x338e	; 0x338e <UART_sendByte>

				Error_And_Input();
    1178:	0e 94 01 08 	call	0x1002	; 0x1002 <Error_And_Input>
				uint8 answerOfBuzzer;
				do{

					answerOfBuzzer=UART_recieveByte();
    117c:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_recieveByte>
    1180:	8a 83       	std	Y+2, r24	; 0x02

				}
				while(answerOfBuzzer!=OPENBUZZER);
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	85 32       	cpi	r24, 0x25	; 37
    1186:	d1 f7       	brne	.-12     	; 0x117c <main+0x146>
    1188:	0b c0       	rjmp	.+22     	; 0x11a0 <main+0x16a>
		}
		else{
			uint8 answer;
			do{

			UART_sendByte(CREATINGPASSWORD);
    118a:	82 e1       	ldi	r24, 0x12	; 18
    118c:	0e 94 c7 19 	call	0x338e	; 0x338e <UART_sendByte>
			New_Password();
    1190:	0e 94 d4 06 	call	0xda8	; 0xda8 <New_Password>

			answer=UART_recieveByte();
    1194:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_recieveByte>
    1198:	89 83       	std	Y+1, r24	; 0x01
			}while(answer!=SAVEDPASSWORD);
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	83 31       	cpi	r24, 0x13	; 19
    119e:	a9 f7       	brne	.-22     	; 0x118a <main+0x154>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
    11a4:	64 96       	adiw	r28, 0x14	; 20
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	00 d0       	rcall	.+0      	; 0x11bc <GPIO_setupPinDirection+0x6>
    11bc:	00 d0       	rcall	.+0      	; 0x11be <GPIO_setupPinDirection+0x8>
    11be:	0f 92       	push	r0
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	89 83       	std	Y+1, r24	; 0x01
    11c6:	6a 83       	std	Y+2, r22	; 0x02
    11c8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	88 30       	cpi	r24, 0x08	; 8
    11ce:	08 f0       	brcs	.+2      	; 0x11d2 <GPIO_setupPinDirection+0x1c>
    11d0:	d5 c0       	rjmp	.+426    	; 0x137c <GPIO_setupPinDirection+0x1c6>
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	84 30       	cpi	r24, 0x04	; 4
    11d6:	08 f0       	brcs	.+2      	; 0x11da <GPIO_setupPinDirection+0x24>
    11d8:	d1 c0       	rjmp	.+418    	; 0x137c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3d 83       	std	Y+5, r19	; 0x05
    11e2:	2c 83       	std	Y+4, r18	; 0x04
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	9d 81       	ldd	r25, Y+5	; 0x05
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <GPIO_setupPinDirection+0x3a>
    11ee:	43 c0       	rjmp	.+134    	; 0x1276 <GPIO_setupPinDirection+0xc0>
    11f0:	2c 81       	ldd	r18, Y+4	; 0x04
    11f2:	3d 81       	ldd	r19, Y+5	; 0x05
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	2c f4       	brge	.+10     	; 0x1204 <GPIO_setupPinDirection+0x4e>
    11fa:	8c 81       	ldd	r24, Y+4	; 0x04
    11fc:	9d 81       	ldd	r25, Y+5	; 0x05
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	71 f0       	breq	.+28     	; 0x121e <GPIO_setupPinDirection+0x68>
    1202:	bc c0       	rjmp	.+376    	; 0x137c <GPIO_setupPinDirection+0x1c6>
    1204:	2c 81       	ldd	r18, Y+4	; 0x04
    1206:	3d 81       	ldd	r19, Y+5	; 0x05
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	09 f4       	brne	.+2      	; 0x1210 <GPIO_setupPinDirection+0x5a>
    120e:	5f c0       	rjmp	.+190    	; 0x12ce <GPIO_setupPinDirection+0x118>
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	91 05       	cpc	r25, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <GPIO_setupPinDirection+0x66>
    121a:	85 c0       	rjmp	.+266    	; 0x1326 <GPIO_setupPinDirection+0x170>
    121c:	af c0       	rjmp	.+350    	; 0x137c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	a1 f4       	brne	.+40     	; 0x124c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1224:	aa e3       	ldi	r26, 0x3A	; 58
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ea e3       	ldi	r30, 0x3A	; 58
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <GPIO_setupPinDirection+0x8c>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <GPIO_setupPinDirection+0x88>
    1246:	84 2b       	or	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	98 c0       	rjmp	.+304    	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    124c:	aa e3       	ldi	r26, 0x3A	; 58
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ea e3       	ldi	r30, 0x3A	; 58
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <GPIO_setupPinDirection+0xb4>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <GPIO_setupPinDirection+0xb0>
    126e:	80 95       	com	r24
    1270:	84 23       	and	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	83 c0       	rjmp	.+262    	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	a1 f4       	brne	.+40     	; 0x12a4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    127c:	a7 e3       	ldi	r26, 0x37	; 55
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e7 e3       	ldi	r30, 0x37	; 55
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <GPIO_setupPinDirection+0xe4>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <GPIO_setupPinDirection+0xe0>
    129e:	84 2b       	or	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	6c c0       	rjmp	.+216    	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12a4:	a7 e3       	ldi	r26, 0x37	; 55
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e7 e3       	ldi	r30, 0x37	; 55
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <GPIO_setupPinDirection+0x10c>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <GPIO_setupPinDirection+0x108>
    12c6:	80 95       	com	r24
    12c8:	84 23       	and	r24, r20
    12ca:	8c 93       	st	X, r24
    12cc:	57 c0       	rjmp	.+174    	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	a1 f4       	brne	.+40     	; 0x12fc <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12d4:	a4 e3       	ldi	r26, 0x34	; 52
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e4 e3       	ldi	r30, 0x34	; 52
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <GPIO_setupPinDirection+0x13c>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <GPIO_setupPinDirection+0x138>
    12f6:	84 2b       	or	r24, r20
    12f8:	8c 93       	st	X, r24
    12fa:	40 c0       	rjmp	.+128    	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    12fc:	a4 e3       	ldi	r26, 0x34	; 52
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e4 e3       	ldi	r30, 0x34	; 52
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <GPIO_setupPinDirection+0x164>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <GPIO_setupPinDirection+0x160>
    131e:	80 95       	com	r24
    1320:	84 23       	and	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	2b c0       	rjmp	.+86     	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	a1 f4       	brne	.+40     	; 0x1354 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    132c:	a1 e3       	ldi	r26, 0x31	; 49
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e1 e3       	ldi	r30, 0x31	; 49
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <GPIO_setupPinDirection+0x194>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <GPIO_setupPinDirection+0x190>
    134e:	84 2b       	or	r24, r20
    1350:	8c 93       	st	X, r24
    1352:	14 c0       	rjmp	.+40     	; 0x137c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1354:	a1 e3       	ldi	r26, 0x31	; 49
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e1 e3       	ldi	r30, 0x31	; 49
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	48 2f       	mov	r20, r24
    1360:	8a 81       	ldd	r24, Y+2	; 0x02
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	02 2e       	mov	r0, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <GPIO_setupPinDirection+0x1bc>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	0a 94       	dec	r0
    1374:	e2 f7       	brpl	.-8      	; 0x136e <GPIO_setupPinDirection+0x1b8>
    1376:	80 95       	com	r24
    1378:	84 23       	and	r24, r20
    137a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	00 d0       	rcall	.+0      	; 0x1392 <GPIO_writePin+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <GPIO_writePin+0x8>
    1394:	0f 92       	push	r0
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    139a:	89 83       	std	Y+1, r24	; 0x01
    139c:	6a 83       	std	Y+2, r22	; 0x02
    139e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13a0:	8a 81       	ldd	r24, Y+2	; 0x02
    13a2:	88 30       	cpi	r24, 0x08	; 8
    13a4:	08 f0       	brcs	.+2      	; 0x13a8 <GPIO_writePin+0x1c>
    13a6:	d5 c0       	rjmp	.+426    	; 0x1552 <GPIO_writePin+0x1c6>
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	84 30       	cpi	r24, 0x04	; 4
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <GPIO_writePin+0x24>
    13ae:	d1 c0       	rjmp	.+418    	; 0x1552 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3d 83       	std	Y+5, r19	; 0x05
    13b8:	2c 83       	std	Y+4, r18	; 0x04
    13ba:	8c 81       	ldd	r24, Y+4	; 0x04
    13bc:	9d 81       	ldd	r25, Y+5	; 0x05
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <GPIO_writePin+0x3a>
    13c4:	43 c0       	rjmp	.+134    	; 0x144c <GPIO_writePin+0xc0>
    13c6:	2c 81       	ldd	r18, Y+4	; 0x04
    13c8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	2c f4       	brge	.+10     	; 0x13da <GPIO_writePin+0x4e>
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	9d 81       	ldd	r25, Y+5	; 0x05
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	71 f0       	breq	.+28     	; 0x13f4 <GPIO_writePin+0x68>
    13d8:	bc c0       	rjmp	.+376    	; 0x1552 <GPIO_writePin+0x1c6>
    13da:	2c 81       	ldd	r18, Y+4	; 0x04
    13dc:	3d 81       	ldd	r19, Y+5	; 0x05
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <GPIO_writePin+0x5a>
    13e4:	5f c0       	rjmp	.+190    	; 0x14a4 <GPIO_writePin+0x118>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <GPIO_writePin+0x66>
    13f0:	85 c0       	rjmp	.+266    	; 0x14fc <GPIO_writePin+0x170>
    13f2:	af c0       	rjmp	.+350    	; 0x1552 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	81 30       	cpi	r24, 0x01	; 1
    13f8:	a1 f4       	brne	.+40     	; 0x1422 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    13fa:	ab e3       	ldi	r26, 0x3B	; 59
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	eb e3       	ldi	r30, 0x3B	; 59
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_writePin+0x8c>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_writePin+0x88>
    141c:	84 2b       	or	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	98 c0       	rjmp	.+304    	; 0x1552 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1422:	ab e3       	ldi	r26, 0x3B	; 59
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	eb e3       	ldi	r30, 0x3B	; 59
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 2e       	mov	r0, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <GPIO_writePin+0xb4>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	0a 94       	dec	r0
    1442:	e2 f7       	brpl	.-8      	; 0x143c <GPIO_writePin+0xb0>
    1444:	80 95       	com	r24
    1446:	84 23       	and	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	83 c0       	rjmp	.+262    	; 0x1552 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	a1 f4       	brne	.+40     	; 0x147a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1452:	a8 e3       	ldi	r26, 0x38	; 56
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e8 e3       	ldi	r30, 0x38	; 56
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <GPIO_writePin+0xe4>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <GPIO_writePin+0xe0>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
    1478:	6c c0       	rjmp	.+216    	; 0x1552 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    147a:	a8 e3       	ldi	r26, 0x38	; 56
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e8 e3       	ldi	r30, 0x38	; 56
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	48 2f       	mov	r20, r24
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	02 2e       	mov	r0, r18
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <GPIO_writePin+0x10c>
    1494:	88 0f       	add	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	0a 94       	dec	r0
    149a:	e2 f7       	brpl	.-8      	; 0x1494 <GPIO_writePin+0x108>
    149c:	80 95       	com	r24
    149e:	84 23       	and	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	57 c0       	rjmp	.+174    	; 0x1552 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	a1 f4       	brne	.+40     	; 0x14d2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14aa:	a5 e3       	ldi	r26, 0x35	; 53
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e3       	ldi	r30, 0x35	; 53
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_writePin+0x13c>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_writePin+0x138>
    14cc:	84 2b       	or	r24, r20
    14ce:	8c 93       	st	X, r24
    14d0:	40 c0       	rjmp	.+128    	; 0x1552 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    14d2:	a5 e3       	ldi	r26, 0x35	; 53
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	e5 e3       	ldi	r30, 0x35	; 53
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	48 2f       	mov	r20, r24
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 2e       	mov	r0, r18
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <GPIO_writePin+0x164>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <GPIO_writePin+0x160>
    14f4:	80 95       	com	r24
    14f6:	84 23       	and	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	2b c0       	rjmp	.+86     	; 0x1552 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	a1 f4       	brne	.+40     	; 0x152a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1502:	a2 e3       	ldi	r26, 0x32	; 50
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e2 e3       	ldi	r30, 0x32	; 50
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <GPIO_writePin+0x194>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <GPIO_writePin+0x190>
    1524:	84 2b       	or	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	14 c0       	rjmp	.+40     	; 0x1552 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    152a:	a2 e3       	ldi	r26, 0x32	; 50
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e2 e3       	ldi	r30, 0x32	; 50
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 2e       	mov	r0, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <GPIO_writePin+0x1bc>
    1544:	88 0f       	add	r24, r24
    1546:	99 1f       	adc	r25, r25
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <GPIO_writePin+0x1b8>
    154c:	80 95       	com	r24
    154e:	84 23       	and	r24, r20
    1550:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	00 d0       	rcall	.+0      	; 0x1568 <GPIO_readPin+0x6>
    1568:	00 d0       	rcall	.+0      	; 0x156a <GPIO_readPin+0x8>
    156a:	0f 92       	push	r0
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	8a 83       	std	Y+2, r24	; 0x02
    1572:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1574:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	88 30       	cpi	r24, 0x08	; 8
    157a:	08 f0       	brcs	.+2      	; 0x157e <GPIO_readPin+0x1c>
    157c:	84 c0       	rjmp	.+264    	; 0x1686 <GPIO_readPin+0x124>
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	84 30       	cpi	r24, 0x04	; 4
    1582:	08 f0       	brcs	.+2      	; 0x1586 <GPIO_readPin+0x24>
    1584:	80 c0       	rjmp	.+256    	; 0x1686 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	3d 83       	std	Y+5, r19	; 0x05
    158e:	2c 83       	std	Y+4, r18	; 0x04
    1590:	4c 81       	ldd	r20, Y+4	; 0x04
    1592:	5d 81       	ldd	r21, Y+5	; 0x05
    1594:	41 30       	cpi	r20, 0x01	; 1
    1596:	51 05       	cpc	r21, r1
    1598:	79 f1       	breq	.+94     	; 0x15f8 <GPIO_readPin+0x96>
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	82 30       	cpi	r24, 0x02	; 2
    15a0:	91 05       	cpc	r25, r1
    15a2:	34 f4       	brge	.+12     	; 0x15b0 <GPIO_readPin+0x4e>
    15a4:	2c 81       	ldd	r18, Y+4	; 0x04
    15a6:	3d 81       	ldd	r19, Y+5	; 0x05
    15a8:	21 15       	cp	r18, r1
    15aa:	31 05       	cpc	r19, r1
    15ac:	69 f0       	breq	.+26     	; 0x15c8 <GPIO_readPin+0x66>
    15ae:	6b c0       	rjmp	.+214    	; 0x1686 <GPIO_readPin+0x124>
    15b0:	4c 81       	ldd	r20, Y+4	; 0x04
    15b2:	5d 81       	ldd	r21, Y+5	; 0x05
    15b4:	42 30       	cpi	r20, 0x02	; 2
    15b6:	51 05       	cpc	r21, r1
    15b8:	b9 f1       	breq	.+110    	; 0x1628 <GPIO_readPin+0xc6>
    15ba:	8c 81       	ldd	r24, Y+4	; 0x04
    15bc:	9d 81       	ldd	r25, Y+5	; 0x05
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	91 05       	cpc	r25, r1
    15c2:	09 f4       	brne	.+2      	; 0x15c6 <GPIO_readPin+0x64>
    15c4:	49 c0       	rjmp	.+146    	; 0x1658 <GPIO_readPin+0xf6>
    15c6:	5f c0       	rjmp	.+190    	; 0x1686 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    15c8:	e9 e3       	ldi	r30, 0x39	; 57
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a9 01       	movw	r20, r18
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <GPIO_readPin+0x7e>
    15dc:	55 95       	asr	r21
    15de:	47 95       	ror	r20
    15e0:	8a 95       	dec	r24
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <GPIO_readPin+0x7a>
    15e4:	ca 01       	movw	r24, r20
    15e6:	81 70       	andi	r24, 0x01	; 1
    15e8:	90 70       	andi	r25, 0x00	; 0
    15ea:	88 23       	and	r24, r24
    15ec:	19 f0       	breq	.+6      	; 0x15f4 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	49 c0       	rjmp	.+146    	; 0x1686 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15f4:	19 82       	std	Y+1, r1	; 0x01
    15f6:	47 c0       	rjmp	.+142    	; 0x1686 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    15f8:	e6 e3       	ldi	r30, 0x36	; 54
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 2f       	mov	r24, r24
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a9 01       	movw	r20, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <GPIO_readPin+0xae>
    160c:	55 95       	asr	r21
    160e:	47 95       	ror	r20
    1610:	8a 95       	dec	r24
    1612:	e2 f7       	brpl	.-8      	; 0x160c <GPIO_readPin+0xaa>
    1614:	ca 01       	movw	r24, r20
    1616:	81 70       	andi	r24, 0x01	; 1
    1618:	90 70       	andi	r25, 0x00	; 0
    161a:	88 23       	and	r24, r24
    161c:	19 f0       	breq	.+6      	; 0x1624 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	31 c0       	rjmp	.+98     	; 0x1686 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1624:	19 82       	std	Y+1, r1	; 0x01
    1626:	2f c0       	rjmp	.+94     	; 0x1686 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1628:	e3 e3       	ldi	r30, 0x33	; 51
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	88 2f       	mov	r24, r24
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	a9 01       	movw	r20, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <GPIO_readPin+0xde>
    163c:	55 95       	asr	r21
    163e:	47 95       	ror	r20
    1640:	8a 95       	dec	r24
    1642:	e2 f7       	brpl	.-8      	; 0x163c <GPIO_readPin+0xda>
    1644:	ca 01       	movw	r24, r20
    1646:	81 70       	andi	r24, 0x01	; 1
    1648:	90 70       	andi	r25, 0x00	; 0
    164a:	88 23       	and	r24, r24
    164c:	19 f0       	breq	.+6      	; 0x1654 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	19 c0       	rjmp	.+50     	; 0x1686 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1654:	19 82       	std	Y+1, r1	; 0x01
    1656:	17 c0       	rjmp	.+46     	; 0x1686 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1658:	e0 e3       	ldi	r30, 0x30	; 48
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a9 01       	movw	r20, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_readPin+0x10e>
    166c:	55 95       	asr	r21
    166e:	47 95       	ror	r20
    1670:	8a 95       	dec	r24
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_readPin+0x10a>
    1674:	ca 01       	movw	r24, r20
    1676:	81 70       	andi	r24, 0x01	; 1
    1678:	90 70       	andi	r25, 0x00	; 0
    167a:	88 23       	and	r24, r24
    167c:	19 f0       	breq	.+6      	; 0x1684 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	89 83       	std	Y+1, r24	; 0x01
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1684:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1686:	89 81       	ldd	r24, Y+1	; 0x01
}
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <GPIO_setupPortDirection+0x6>
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <GPIO_setupPortDirection+0x8>
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	84 30       	cpi	r24, 0x04	; 4
    16ac:	90 f5       	brcc	.+100    	; 0x1712 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	3c 83       	std	Y+4, r19	; 0x04
    16b6:	2b 83       	std	Y+3, r18	; 0x03
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	91 05       	cpc	r25, r1
    16c0:	d1 f0       	breq	.+52     	; 0x16f6 <GPIO_setupPortDirection+0x5e>
    16c2:	2b 81       	ldd	r18, Y+3	; 0x03
    16c4:	3c 81       	ldd	r19, Y+4	; 0x04
    16c6:	22 30       	cpi	r18, 0x02	; 2
    16c8:	31 05       	cpc	r19, r1
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <GPIO_setupPortDirection+0x3e>
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	61 f0       	breq	.+24     	; 0x16ec <GPIO_setupPortDirection+0x54>
    16d4:	1e c0       	rjmp	.+60     	; 0x1712 <GPIO_setupPortDirection+0x7a>
    16d6:	2b 81       	ldd	r18, Y+3	; 0x03
    16d8:	3c 81       	ldd	r19, Y+4	; 0x04
    16da:	22 30       	cpi	r18, 0x02	; 2
    16dc:	31 05       	cpc	r19, r1
    16de:	81 f0       	breq	.+32     	; 0x1700 <GPIO_setupPortDirection+0x68>
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	9c 81       	ldd	r25, Y+4	; 0x04
    16e4:	83 30       	cpi	r24, 0x03	; 3
    16e6:	91 05       	cpc	r25, r1
    16e8:	81 f0       	breq	.+32     	; 0x170a <GPIO_setupPortDirection+0x72>
    16ea:	13 c0       	rjmp	.+38     	; 0x1712 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16ec:	ea e3       	ldi	r30, 0x3A	; 58
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	80 83       	st	Z, r24
    16f4:	0e c0       	rjmp	.+28     	; 0x1712 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16f6:	e7 e3       	ldi	r30, 0x37	; 55
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	80 83       	st	Z, r24
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1700:	e4 e3       	ldi	r30, 0x34	; 52
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	80 83       	st	Z, r24
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    170a:	e1 e3       	ldi	r30, 0x31	; 49
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	80 83       	st	Z, r24
			break;
		}
	}
}
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	0f 90       	pop	r0
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	00 d0       	rcall	.+0      	; 0x1726 <GPIO_writePort+0x6>
    1726:	00 d0       	rcall	.+0      	; 0x1728 <GPIO_writePort+0x8>
    1728:	cd b7       	in	r28, 0x3d	; 61
    172a:	de b7       	in	r29, 0x3e	; 62
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	84 30       	cpi	r24, 0x04	; 4
    1734:	90 f5       	brcc	.+100    	; 0x179a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	3c 83       	std	Y+4, r19	; 0x04
    173e:	2b 83       	std	Y+3, r18	; 0x03
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	91 05       	cpc	r25, r1
    1748:	d1 f0       	breq	.+52     	; 0x177e <GPIO_writePort+0x5e>
    174a:	2b 81       	ldd	r18, Y+3	; 0x03
    174c:	3c 81       	ldd	r19, Y+4	; 0x04
    174e:	22 30       	cpi	r18, 0x02	; 2
    1750:	31 05       	cpc	r19, r1
    1752:	2c f4       	brge	.+10     	; 0x175e <GPIO_writePort+0x3e>
    1754:	8b 81       	ldd	r24, Y+3	; 0x03
    1756:	9c 81       	ldd	r25, Y+4	; 0x04
    1758:	00 97       	sbiw	r24, 0x00	; 0
    175a:	61 f0       	breq	.+24     	; 0x1774 <GPIO_writePort+0x54>
    175c:	1e c0       	rjmp	.+60     	; 0x179a <GPIO_writePort+0x7a>
    175e:	2b 81       	ldd	r18, Y+3	; 0x03
    1760:	3c 81       	ldd	r19, Y+4	; 0x04
    1762:	22 30       	cpi	r18, 0x02	; 2
    1764:	31 05       	cpc	r19, r1
    1766:	81 f0       	breq	.+32     	; 0x1788 <GPIO_writePort+0x68>
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	83 30       	cpi	r24, 0x03	; 3
    176e:	91 05       	cpc	r25, r1
    1770:	81 f0       	breq	.+32     	; 0x1792 <GPIO_writePort+0x72>
    1772:	13 c0       	rjmp	.+38     	; 0x179a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1774:	eb e3       	ldi	r30, 0x3B	; 59
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	80 83       	st	Z, r24
    177c:	0e c0       	rjmp	.+28     	; 0x179a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    177e:	e8 e3       	ldi	r30, 0x38	; 56
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	80 83       	st	Z, r24
    1786:	09 c0       	rjmp	.+18     	; 0x179a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1788:	e5 e3       	ldi	r30, 0x35	; 53
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	80 83       	st	Z, r24
    1790:	04 c0       	rjmp	.+8      	; 0x179a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1792:	e2 e3       	ldi	r30, 0x32	; 50
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	80 83       	st	Z, r24
			break;
		}
	}
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
    17a0:	0f 90       	pop	r0
    17a2:	cf 91       	pop	r28
    17a4:	df 91       	pop	r29
    17a6:	08 95       	ret

000017a8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	00 d0       	rcall	.+0      	; 0x17ae <GPIO_readPort+0x6>
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <GPIO_readPort+0x8>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    17b6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	84 30       	cpi	r24, 0x04	; 4
    17bc:	90 f5       	brcc	.+100    	; 0x1822 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	3c 83       	std	Y+4, r19	; 0x04
    17c6:	2b 83       	std	Y+3, r18	; 0x03
    17c8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ca:	9c 81       	ldd	r25, Y+4	; 0x04
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	91 05       	cpc	r25, r1
    17d0:	d1 f0       	breq	.+52     	; 0x1806 <GPIO_readPort+0x5e>
    17d2:	2b 81       	ldd	r18, Y+3	; 0x03
    17d4:	3c 81       	ldd	r19, Y+4	; 0x04
    17d6:	22 30       	cpi	r18, 0x02	; 2
    17d8:	31 05       	cpc	r19, r1
    17da:	2c f4       	brge	.+10     	; 0x17e6 <GPIO_readPort+0x3e>
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	61 f0       	breq	.+24     	; 0x17fc <GPIO_readPort+0x54>
    17e4:	1e c0       	rjmp	.+60     	; 0x1822 <GPIO_readPort+0x7a>
    17e6:	2b 81       	ldd	r18, Y+3	; 0x03
    17e8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ea:	22 30       	cpi	r18, 0x02	; 2
    17ec:	31 05       	cpc	r19, r1
    17ee:	81 f0       	breq	.+32     	; 0x1810 <GPIO_readPort+0x68>
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	9c 81       	ldd	r25, Y+4	; 0x04
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	91 05       	cpc	r25, r1
    17f8:	81 f0       	breq	.+32     	; 0x181a <GPIO_readPort+0x72>
    17fa:	13 c0       	rjmp	.+38     	; 0x1822 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    17fc:	e9 e3       	ldi	r30, 0x39	; 57
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	0e c0       	rjmp	.+28     	; 0x1822 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1806:	e6 e3       	ldi	r30, 0x36	; 54
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	89 83       	std	Y+1, r24	; 0x01
    180e:	09 c0       	rjmp	.+18     	; 0x1822 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1810:	e3 e3       	ldi	r30, 0x33	; 51
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	89 83       	std	Y+1, r24	; 0x01
    1818:	04 c0       	rjmp	.+8      	; 0x1822 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    181a:	e0 e3       	ldi	r30, 0x30	; 48
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1822:	89 81       	ldd	r24, Y+1	; 0x01
}
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	08 95       	ret

00001832 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1832:	df 93       	push	r29
    1834:	cf 93       	push	r28
    1836:	cd b7       	in	r28, 0x3d	; 61
    1838:	de b7       	in	r29, 0x3e	; 62
    183a:	60 97       	sbiw	r28, 0x10	; 16
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	f8 94       	cli
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	0f be       	out	0x3f, r0	; 63
    1844:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	64 e0       	ldi	r22, 0x04	; 4
    184a:	40 e0       	ldi	r20, 0x00	; 0
    184c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	65 e0       	ldi	r22, 0x05	; 5
    1854:	40 e0       	ldi	r20, 0x00	; 0
    1856:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	66 e0       	ldi	r22, 0x06	; 6
    185e:	40 e0       	ldi	r20, 0x00	; 0
    1860:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	67 e0       	ldi	r22, 0x07	; 7
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	62 e0       	ldi	r22, 0x02	; 2
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	63 e0       	ldi	r22, 0x03	; 3
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1882:	83 e0       	ldi	r24, 0x03	; 3
    1884:	64 e0       	ldi	r22, 0x04	; 4
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    188c:	83 e0       	ldi	r24, 0x03	; 3
    188e:	65 e0       	ldi	r22, 0x05	; 5
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1896:	1f 86       	std	Y+15, r1	; 0x0f
    1898:	b4 c0       	rjmp	.+360    	; 0x1a02 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    189a:	8f 85       	ldd	r24, Y+15	; 0x0f
    189c:	98 2f       	mov	r25, r24
    189e:	9c 5f       	subi	r25, 0xFC	; 252
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	69 2f       	mov	r22, r25
    18a4:	41 e0       	ldi	r20, 0x01	; 1
    18a6:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    18aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ac:	98 2f       	mov	r25, r24
    18ae:	9c 5f       	subi	r25, 0xFC	; 252
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	69 2f       	mov	r22, r25
    18b4:	40 e0       	ldi	r20, 0x00	; 0
    18b6:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    18ba:	18 8a       	std	Y+16, r1	; 0x10
    18bc:	22 c0       	rjmp	.+68     	; 0x1902 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    18be:	88 89       	ldd	r24, Y+16	; 0x10
    18c0:	98 2f       	mov	r25, r24
    18c2:	9e 5f       	subi	r25, 0xFE	; 254
    18c4:	83 e0       	ldi	r24, 0x03	; 3
    18c6:	69 2f       	mov	r22, r25
    18c8:	0e 94 b1 0a 	call	0x1562	; 0x1562 <GPIO_readPin>
    18cc:	88 23       	and	r24, r24
    18ce:	b1 f4       	brne	.+44     	; 0x18fc <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    18d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	98 2f       	mov	r25, r24
    18e0:	88 89       	ldd	r24, Y+16	; 0x10
    18e2:	89 0f       	add	r24, r25
    18e4:	8f 5f       	subi	r24, 0xFF	; 255
    18e6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    18ea:	60 96       	adiw	r28, 0x10	; 16
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    18fc:	88 89       	ldd	r24, Y+16	; 0x10
    18fe:	8f 5f       	subi	r24, 0xFF	; 255
    1900:	88 8b       	std	Y+16, r24	; 0x10
    1902:	88 89       	ldd	r24, Y+16	; 0x10
    1904:	84 30       	cpi	r24, 0x04	; 4
    1906:	d8 f2       	brcs	.-74     	; 0x18be <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1908:	8f 85       	ldd	r24, Y+15	; 0x0f
    190a:	98 2f       	mov	r25, r24
    190c:	9c 5f       	subi	r25, 0xFC	; 252
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	69 2f       	mov	r22, r25
    1912:	40 e0       	ldi	r20, 0x00	; 0
    1914:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	a0 ea       	ldi	r26, 0xA0	; 160
    191e:	b0 e4       	ldi	r27, 0x40	; 64
    1920:	8b 87       	std	Y+11, r24	; 0x0b
    1922:	9c 87       	std	Y+12, r25	; 0x0c
    1924:	ad 87       	std	Y+13, r26	; 0x0d
    1926:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1928:	6b 85       	ldd	r22, Y+11	; 0x0b
    192a:	7c 85       	ldd	r23, Y+12	; 0x0c
    192c:	8d 85       	ldd	r24, Y+13	; 0x0d
    192e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	4a ef       	ldi	r20, 0xFA	; 250
    1936:	54 e4       	ldi	r21, 0x44	; 68
    1938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193c:	dc 01       	movw	r26, r24
    193e:	cb 01       	movw	r24, r22
    1940:	8f 83       	std	Y+7, r24	; 0x07
    1942:	98 87       	std	Y+8, r25	; 0x08
    1944:	a9 87       	std	Y+9, r26	; 0x09
    1946:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1948:	6f 81       	ldd	r22, Y+7	; 0x07
    194a:	78 85       	ldd	r23, Y+8	; 0x08
    194c:	89 85       	ldd	r24, Y+9	; 0x09
    194e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e8       	ldi	r20, 0x80	; 128
    1956:	5f e3       	ldi	r21, 0x3F	; 63
    1958:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    195c:	88 23       	and	r24, r24
    195e:	2c f4       	brge	.+10     	; 0x196a <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
    1968:	3f c0       	rjmp	.+126    	; 0x19e8 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    196a:	6f 81       	ldd	r22, Y+7	; 0x07
    196c:	78 85       	ldd	r23, Y+8	; 0x08
    196e:	89 85       	ldd	r24, Y+9	; 0x09
    1970:	9a 85       	ldd	r25, Y+10	; 0x0a
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	3f ef       	ldi	r19, 0xFF	; 255
    1976:	4f e7       	ldi	r20, 0x7F	; 127
    1978:	57 e4       	ldi	r21, 0x47	; 71
    197a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    197e:	18 16       	cp	r1, r24
    1980:	4c f5       	brge	.+82     	; 0x19d4 <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1982:	6b 85       	ldd	r22, Y+11	; 0x0b
    1984:	7c 85       	ldd	r23, Y+12	; 0x0c
    1986:	8d 85       	ldd	r24, Y+13	; 0x0d
    1988:	9e 85       	ldd	r25, Y+14	; 0x0e
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e2       	ldi	r20, 0x20	; 32
    1990:	51 e4       	ldi	r21, 0x41	; 65
    1992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	bc 01       	movw	r22, r24
    199c:	cd 01       	movw	r24, r26
    199e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	9e 83       	std	Y+6, r25	; 0x06
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    19aa:	0f c0       	rjmp	.+30     	; 0x19ca <KEYPAD_getPressedKey+0x198>
    19ac:	88 ec       	ldi	r24, 0xC8	; 200
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	9c 83       	std	Y+4, r25	; 0x04
    19b2:	8b 83       	std	Y+3, r24	; 0x03
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <KEYPAD_getPressedKey+0x186>
    19bc:	9c 83       	std	Y+4, r25	; 0x04
    19be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	01 97       	sbiw	r24, 0x01	; 1
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	9e 81       	ldd	r25, Y+6	; 0x06
    19ce:	00 97       	sbiw	r24, 0x00	; 0
    19d0:	69 f7       	brne	.-38     	; 0x19ac <KEYPAD_getPressedKey+0x17a>
    19d2:	14 c0       	rjmp	.+40     	; 0x19fc <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d4:	6f 81       	ldd	r22, Y+7	; 0x07
    19d6:	78 85       	ldd	r23, Y+8	; 0x08
    19d8:	89 85       	ldd	r24, Y+9	; 0x09
    19da:	9a 85       	ldd	r25, Y+10	; 0x0a
    19dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	9e 83       	std	Y+6, r25	; 0x06
    19e6:	8d 83       	std	Y+5, r24	; 0x05
    19e8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ea:	9e 81       	ldd	r25, Y+6	; 0x06
    19ec:	9a 83       	std	Y+2, r25	; 0x02
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	9a 81       	ldd	r25, Y+2	; 0x02
    19f4:	01 97       	sbiw	r24, 0x01	; 1
    19f6:	f1 f7       	brne	.-4      	; 0x19f4 <KEYPAD_getPressedKey+0x1c2>
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    19fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	8f 87       	std	Y+15, r24	; 0x0f
    1a02:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	08 f4       	brcc	.+2      	; 0x1a0a <KEYPAD_getPressedKey+0x1d8>
    1a08:	48 cf       	rjmp	.-368    	; 0x189a <KEYPAD_getPressedKey+0x68>
    1a0a:	45 cf       	rjmp	.-374    	; 0x1896 <KEYPAD_getPressedKey+0x64>

00001a0c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1a1a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	3c 83       	std	Y+4, r19	; 0x04
    1a24:	2b 83       	std	Y+3, r18	; 0x03
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2a:	88 30       	cpi	r24, 0x08	; 8
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1a30:	70 c0       	rjmp	.+224    	; 0x1b12 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1a32:	2b 81       	ldd	r18, Y+3	; 0x03
    1a34:	3c 81       	ldd	r19, Y+4	; 0x04
    1a36:	29 30       	cpi	r18, 0x09	; 9
    1a38:	31 05       	cpc	r19, r1
    1a3a:	5c f5       	brge	.+86     	; 0x1a92 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	84 30       	cpi	r24, 0x04	; 4
    1a42:	91 05       	cpc	r25, r1
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1a46:	59 c0       	rjmp	.+178    	; 0x1afa <KEYPAD_4x4_adjustKeyNumber+0xee>
    1a48:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4c:	25 30       	cpi	r18, 0x05	; 5
    1a4e:	31 05       	cpc	r19, r1
    1a50:	9c f4       	brge	.+38     	; 0x1a78 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	82 30       	cpi	r24, 0x02	; 2
    1a58:	91 05       	cpc	r25, r1
    1a5a:	09 f4       	brne	.+2      	; 0x1a5e <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a5c:	48 c0       	rjmp	.+144    	; 0x1aee <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1a5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a60:	3c 81       	ldd	r19, Y+4	; 0x04
    1a62:	23 30       	cpi	r18, 0x03	; 3
    1a64:	31 05       	cpc	r19, r1
    1a66:	0c f0       	brlt	.+2      	; 0x1a6a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1a68:	45 c0       	rjmp	.+138    	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 05       	cpc	r25, r1
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1a74:	39 c0       	rjmp	.+114    	; 0x1ae8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1a76:	67 c0       	rjmp	.+206    	; 0x1b46 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1a78:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7c:	26 30       	cpi	r18, 0x06	; 6
    1a7e:	31 05       	cpc	r19, r1
    1a80:	09 f4       	brne	.+2      	; 0x1a84 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1a82:	41 c0       	rjmp	.+130    	; 0x1b06 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	87 30       	cpi	r24, 0x07	; 7
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	0c f0       	brlt	.+2      	; 0x1a90 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1a8e:	3e c0       	rjmp	.+124    	; 0x1b0c <KEYPAD_4x4_adjustKeyNumber+0x100>
    1a90:	37 c0       	rjmp	.+110    	; 0x1b00 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1a92:	2b 81       	ldd	r18, Y+3	; 0x03
    1a94:	3c 81       	ldd	r19, Y+4	; 0x04
    1a96:	2c 30       	cpi	r18, 0x0C	; 12
    1a98:	31 05       	cpc	r19, r1
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <KEYPAD_4x4_adjustKeyNumber+0x92>
    1a9c:	46 c0       	rjmp	.+140    	; 0x1b2a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	8d 30       	cpi	r24, 0x0D	; 13
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	5c f4       	brge	.+22     	; 0x1abe <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	2a 30       	cpi	r18, 0x0A	; 10
    1aae:	31 05       	cpc	r19, r1
    1ab0:	b1 f1       	breq	.+108    	; 0x1b1e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	8b 30       	cpi	r24, 0x0B	; 11
    1ab8:	91 05       	cpc	r25, r1
    1aba:	a4 f5       	brge	.+104    	; 0x1b24 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1abc:	2d c0       	rjmp	.+90     	; 0x1b18 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1abe:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac2:	2e 30       	cpi	r18, 0x0E	; 14
    1ac4:	31 05       	cpc	r19, r1
    1ac6:	b9 f1       	breq	.+110    	; 0x1b36 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aca:	9c 81       	ldd	r25, Y+4	; 0x04
    1acc:	8e 30       	cpi	r24, 0x0E	; 14
    1ace:	91 05       	cpc	r25, r1
    1ad0:	7c f1       	brlt	.+94     	; 0x1b30 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad6:	2f 30       	cpi	r18, 0x0F	; 15
    1ad8:	31 05       	cpc	r19, r1
    1ada:	79 f1       	breq	.+94     	; 0x1b3a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae0:	80 31       	cpi	r24, 0x10	; 16
    1ae2:	91 05       	cpc	r25, r1
    1ae4:	69 f1       	breq	.+90     	; 0x1b40 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1ae6:	2f c0       	rjmp	.+94     	; 0x1b46 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1ae8:	87 e0       	ldi	r24, 0x07	; 7
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	2e c0       	rjmp	.+92     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1aee:	88 e0       	ldi	r24, 0x08	; 8
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	2b c0       	rjmp	.+86     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1af4:	89 e0       	ldi	r24, 0x09	; 9
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	28 c0       	rjmp	.+80     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1afa:	85 e2       	ldi	r24, 0x25	; 37
    1afc:	89 83       	std	Y+1, r24	; 0x01
    1afe:	25 c0       	rjmp	.+74     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1b00:	84 e0       	ldi	r24, 0x04	; 4
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	22 c0       	rjmp	.+68     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1b06:	85 e0       	ldi	r24, 0x05	; 5
    1b08:	89 83       	std	Y+1, r24	; 0x01
    1b0a:	1f c0       	rjmp	.+62     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1b0c:	86 e0       	ldi	r24, 0x06	; 6
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	1c c0       	rjmp	.+56     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1b12:	8a e2       	ldi	r24, 0x2A	; 42
    1b14:	89 83       	std	Y+1, r24	; 0x01
    1b16:	19 c0       	rjmp	.+50     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	16 c0       	rjmp	.+44     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1b1e:	82 e0       	ldi	r24, 0x02	; 2
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	13 c0       	rjmp	.+38     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1b24:	83 e0       	ldi	r24, 0x03	; 3
    1b26:	89 83       	std	Y+1, r24	; 0x01
    1b28:	10 c0       	rjmp	.+32     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1b2a:	8d e2       	ldi	r24, 0x2D	; 45
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	0d c0       	rjmp	.+26     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1b30:	8d e0       	ldi	r24, 0x0D	; 13
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	0a c0       	rjmp	.+20     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1b36:	19 82       	std	Y+1, r1	; 0x01
    1b38:	08 c0       	rjmp	.+16     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1b3a:	8d e3       	ldi	r24, 0x3D	; 61
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1b40:	8b e2       	ldi	r24, 0x2B	; 43
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	0f 90       	pop	r0
    1b52:	0f 90       	pop	r0
    1b54:	cf 91       	pop	r28
    1b56:	df 91       	pop	r29
    1b58:	08 95       	ret

00001b5a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b5a:	df 93       	push	r29
    1b5c:	cf 93       	push	r28
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	2e 97       	sbiw	r28, 0x0e	; 14
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	61 e0       	ldi	r22, 0x01	; 1
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	a0 ea       	ldi	r26, 0xA0	; 160
    1b88:	b1 e4       	ldi	r27, 0x41	; 65
    1b8a:	8b 87       	std	Y+11, r24	; 0x0b
    1b8c:	9c 87       	std	Y+12, r25	; 0x0c
    1b8e:	ad 87       	std	Y+13, r26	; 0x0d
    1b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ba0:	54 e4       	ldi	r21, 0x44	; 68
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	8f 83       	std	Y+7, r24	; 0x07
    1bac:	98 87       	std	Y+8, r25	; 0x08
    1bae:	a9 87       	std	Y+9, r26	; 0x09
    1bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e8       	ldi	r20, 0x80	; 128
    1bc0:	5f e3       	ldi	r21, 0x3F	; 63
    1bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc6:	88 23       	and	r24, r24
    1bc8:	2c f4       	brge	.+10     	; 0x1bd4 <LCD_init+0x7a>
		__ticks = 1;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	9e 83       	std	Y+6, r25	; 0x06
    1bd0:	8d 83       	std	Y+5, r24	; 0x05
    1bd2:	3f c0       	rjmp	.+126    	; 0x1c52 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	3f ef       	ldi	r19, 0xFF	; 255
    1be0:	4f e7       	ldi	r20, 0x7F	; 127
    1be2:	57 e4       	ldi	r21, 0x47	; 71
    1be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be8:	18 16       	cp	r1, r24
    1bea:	4c f5       	brge	.+82     	; 0x1c3e <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	40 e2       	ldi	r20, 0x20	; 32
    1bfa:	51 e4       	ldi	r21, 0x41	; 65
    1bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	9e 83       	std	Y+6, r25	; 0x06
    1c12:	8d 83       	std	Y+5, r24	; 0x05
    1c14:	0f c0       	rjmp	.+30     	; 0x1c34 <LCD_init+0xda>
    1c16:	88 ec       	ldi	r24, 0xC8	; 200
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9c 83       	std	Y+4, r25	; 0x04
    1c1c:	8b 83       	std	Y+3, r24	; 0x03
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	9c 81       	ldd	r25, Y+4	; 0x04
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <LCD_init+0xc8>
    1c26:	9c 83       	std	Y+4, r25	; 0x04
    1c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2e:	01 97       	sbiw	r24, 0x01	; 1
    1c30:	9e 83       	std	Y+6, r25	; 0x06
    1c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c34:	8d 81       	ldd	r24, Y+5	; 0x05
    1c36:	9e 81       	ldd	r25, Y+6	; 0x06
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	69 f7       	brne	.-38     	; 0x1c16 <LCD_init+0xbc>
    1c3c:	14 c0       	rjmp	.+40     	; 0x1c66 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c40:	78 85       	ldd	r23, Y+8	; 0x08
    1c42:	89 85       	ldd	r24, Y+9	; 0x09
    1c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	8d 83       	std	Y+5, r24	; 0x05
    1c52:	8d 81       	ldd	r24, Y+5	; 0x05
    1c54:	9e 81       	ldd	r25, Y+6	; 0x06
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <LCD_init+0x104>
    1c62:	9a 83       	std	Y+2, r25	; 0x02
    1c64:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	63 e0       	ldi	r22, 0x03	; 3
    1c6a:	41 e0       	ldi	r20, 0x01	; 1
    1c6c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	64 e0       	ldi	r22, 0x04	; 4
    1c74:	41 e0       	ldi	r20, 0x01	; 1
    1c76:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	65 e0       	ldi	r22, 0x05	; 5
    1c7e:	41 e0       	ldi	r20, 0x01	; 1
    1c80:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	66 e0       	ldi	r22, 0x06	; 6
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	0e 94 db 08 	call	0x11b6	; 0x11b6 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1c8e:	83 e3       	ldi	r24, 0x33	; 51
    1c90:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1c94:	82 e3       	ldi	r24, 0x32	; 50
    1c96:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1c9a:	88 e2       	ldi	r24, 0x28	; 40
    1c9c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1ca0:	8c e0       	ldi	r24, 0x0C	; 12
    1ca2:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_sendCommand>
}
    1cac:	2e 96       	adiw	r28, 0x0e	; 14
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	c3 56       	subi	r28, 0x63	; 99
    1ccc:	d0 40       	sbci	r29, 0x00	; 0
    1cce:	0f b6       	in	r0, 0x3f	; 63
    1cd0:	f8 94       	cli
    1cd2:	de bf       	out	0x3e, r29	; 62
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	cd bf       	out	0x3d, r28	; 61
    1cd8:	fe 01       	movw	r30, r28
    1cda:	ed 59       	subi	r30, 0x9D	; 157
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	61 e0       	ldi	r22, 0x01	; 1
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    1cea:	fe 01       	movw	r30, r28
    1cec:	e1 5a       	subi	r30, 0xA1	; 161
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	a0 e8       	ldi	r26, 0x80	; 128
    1cf6:	bf e3       	ldi	r27, 0x3F	; 63
    1cf8:	80 83       	st	Z, r24
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	a2 83       	std	Z+2, r26	; 0x02
    1cfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d00:	8e 01       	movw	r16, r28
    1d02:	05 5a       	subi	r16, 0xA5	; 165
    1d04:	1f 4f       	sbci	r17, 0xFF	; 255
    1d06:	fe 01       	movw	r30, r28
    1d08:	e1 5a       	subi	r30, 0xA1	; 161
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	4a ef       	ldi	r20, 0xFA	; 250
    1d1a:	54 e4       	ldi	r21, 0x44	; 68
    1d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	f8 01       	movw	r30, r16
    1d26:	80 83       	st	Z, r24
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	a2 83       	std	Z+2, r26	; 0x02
    1d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e5 5a       	subi	r30, 0xA5	; 165
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	60 81       	ld	r22, Z
    1d36:	71 81       	ldd	r23, Z+1	; 0x01
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	93 81       	ldd	r25, Z+3	; 0x03
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	44 f4       	brge	.+16     	; 0x1d5c <LCD_sendCommand+0x9e>
		__ticks = 1;
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e7 5a       	subi	r30, 0xA7	; 167
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	91 83       	std	Z+1, r25	; 0x01
    1d58:	80 83       	st	Z, r24
    1d5a:	64 c0       	rjmp	.+200    	; 0x1e24 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	e5 5a       	subi	r30, 0xA5	; 165
    1d60:	ff 4f       	sbci	r31, 0xFF	; 255
    1d62:	60 81       	ld	r22, Z
    1d64:	71 81       	ldd	r23, Z+1	; 0x01
    1d66:	82 81       	ldd	r24, Z+2	; 0x02
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	3f ef       	ldi	r19, 0xFF	; 255
    1d6e:	4f e7       	ldi	r20, 0x7F	; 127
    1d70:	57 e4       	ldi	r21, 0x47	; 71
    1d72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d76:	18 16       	cp	r1, r24
    1d78:	0c f0       	brlt	.+2      	; 0x1d7c <LCD_sendCommand+0xbe>
    1d7a:	43 c0       	rjmp	.+134    	; 0x1e02 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	e1 5a       	subi	r30, 0xA1	; 161
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	40 e2       	ldi	r20, 0x20	; 32
    1d90:	51 e4       	ldi	r21, 0x41	; 65
    1d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8e 01       	movw	r16, r28
    1d9c:	07 5a       	subi	r16, 0xA7	; 167
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1da0:	bc 01       	movw	r22, r24
    1da2:	cd 01       	movw	r24, r26
    1da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	f8 01       	movw	r30, r16
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	1f c0       	rjmp	.+62     	; 0x1df2 <LCD_sendCommand+0x134>
    1db4:	fe 01       	movw	r30, r28
    1db6:	e9 5a       	subi	r30, 0xA9	; 169
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	88 ec       	ldi	r24, 0xC8	; 200
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e9 5a       	subi	r30, 0xA9	; 169
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 81       	ld	r24, Z
    1dca:	91 81       	ldd	r25, Z+1	; 0x01
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <LCD_sendCommand+0x10e>
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e9 5a       	subi	r30, 0xA9	; 169
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	91 83       	std	Z+1, r25	; 0x01
    1dd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dda:	de 01       	movw	r26, r28
    1ddc:	a7 5a       	subi	r26, 0xA7	; 167
    1dde:	bf 4f       	sbci	r27, 0xFF	; 255
    1de0:	fe 01       	movw	r30, r28
    1de2:	e7 5a       	subi	r30, 0xA7	; 167
    1de4:	ff 4f       	sbci	r31, 0xFF	; 255
    1de6:	80 81       	ld	r24, Z
    1de8:	91 81       	ldd	r25, Z+1	; 0x01
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	11 96       	adiw	r26, 0x01	; 1
    1dee:	9c 93       	st	X, r25
    1df0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df2:	fe 01       	movw	r30, r28
    1df4:	e7 5a       	subi	r30, 0xA7	; 167
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	d1 f6       	brne	.-76     	; 0x1db4 <LCD_sendCommand+0xf6>
    1e00:	27 c0       	rjmp	.+78     	; 0x1e50 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e02:	8e 01       	movw	r16, r28
    1e04:	07 5a       	subi	r16, 0xA7	; 167
    1e06:	1f 4f       	sbci	r17, 0xFF	; 255
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e5 5a       	subi	r30, 0xA5	; 165
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	f8 01       	movw	r30, r16
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
    1e24:	de 01       	movw	r26, r28
    1e26:	ab 5a       	subi	r26, 0xAB	; 171
    1e28:	bf 4f       	sbci	r27, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e7 5a       	subi	r30, 0xA7	; 167
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	8d 93       	st	X+, r24
    1e36:	9c 93       	st	X, r25
    1e38:	fe 01       	movw	r30, r28
    1e3a:	eb 5a       	subi	r30, 0xAB	; 171
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	f1 f7       	brne	.-4      	; 0x1e42 <LCD_sendCommand+0x184>
    1e46:	fe 01       	movw	r30, r28
    1e48:	eb 5a       	subi	r30, 0xAB	; 171
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	91 83       	std	Z+1, r25	; 0x01
    1e4e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	62 e0       	ldi	r22, 0x02	; 2
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	ef 5a       	subi	r30, 0xAF	; 175
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 e0       	ldi	r24, 0x00	; 0
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	a0 e8       	ldi	r26, 0x80	; 128
    1e66:	bf e3       	ldi	r27, 0x3F	; 63
    1e68:	80 83       	st	Z, r24
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	a2 83       	std	Z+2, r26	; 0x02
    1e6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e70:	8e 01       	movw	r16, r28
    1e72:	03 5b       	subi	r16, 0xB3	; 179
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
    1e76:	fe 01       	movw	r30, r28
    1e78:	ef 5a       	subi	r30, 0xAF	; 175
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	60 81       	ld	r22, Z
    1e7e:	71 81       	ldd	r23, Z+1	; 0x01
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	4a ef       	ldi	r20, 0xFA	; 250
    1e8a:	54 e4       	ldi	r21, 0x44	; 68
    1e8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	f8 01       	movw	r30, r16
    1e96:	80 83       	st	Z, r24
    1e98:	91 83       	std	Z+1, r25	; 0x01
    1e9a:	a2 83       	std	Z+2, r26	; 0x02
    1e9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e3 5b       	subi	r30, 0xB3	; 179
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	60 81       	ld	r22, Z
    1ea6:	71 81       	ldd	r23, Z+1	; 0x01
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	44 f4       	brge	.+16     	; 0x1ecc <LCD_sendCommand+0x20e>
		__ticks = 1;
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	e5 5b       	subi	r30, 0xB5	; 181
    1ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	80 83       	st	Z, r24
    1eca:	64 c0       	rjmp	.+200    	; 0x1f94 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1ecc:	fe 01       	movw	r30, r28
    1ece:	e3 5b       	subi	r30, 0xB3	; 179
    1ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed2:	60 81       	ld	r22, Z
    1ed4:	71 81       	ldd	r23, Z+1	; 0x01
    1ed6:	82 81       	ldd	r24, Z+2	; 0x02
    1ed8:	93 81       	ldd	r25, Z+3	; 0x03
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	3f ef       	ldi	r19, 0xFF	; 255
    1ede:	4f e7       	ldi	r20, 0x7F	; 127
    1ee0:	57 e4       	ldi	r21, 0x47	; 71
    1ee2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee6:	18 16       	cp	r1, r24
    1ee8:	0c f0       	brlt	.+2      	; 0x1eec <LCD_sendCommand+0x22e>
    1eea:	43 c0       	rjmp	.+134    	; 0x1f72 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eec:	fe 01       	movw	r30, r28
    1eee:	ef 5a       	subi	r30, 0xAF	; 175
    1ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef2:	60 81       	ld	r22, Z
    1ef4:	71 81       	ldd	r23, Z+1	; 0x01
    1ef6:	82 81       	ldd	r24, Z+2	; 0x02
    1ef8:	93 81       	ldd	r25, Z+3	; 0x03
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e2       	ldi	r20, 0x20	; 32
    1f00:	51 e4       	ldi	r21, 0x41	; 65
    1f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	8e 01       	movw	r16, r28
    1f0c:	05 5b       	subi	r16, 0xB5	; 181
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
    1f22:	1f c0       	rjmp	.+62     	; 0x1f62 <LCD_sendCommand+0x2a4>
    1f24:	fe 01       	movw	r30, r28
    1f26:	e7 5b       	subi	r30, 0xB7	; 183
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	88 ec       	ldi	r24, 0xC8	; 200
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	80 83       	st	Z, r24
    1f32:	fe 01       	movw	r30, r28
    1f34:	e7 5b       	subi	r30, 0xB7	; 183
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	80 81       	ld	r24, Z
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_sendCommand+0x27e>
    1f40:	fe 01       	movw	r30, r28
    1f42:	e7 5b       	subi	r30, 0xB7	; 183
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	91 83       	std	Z+1, r25	; 0x01
    1f48:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4a:	de 01       	movw	r26, r28
    1f4c:	a5 5b       	subi	r26, 0xB5	; 181
    1f4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f50:	fe 01       	movw	r30, r28
    1f52:	e5 5b       	subi	r30, 0xB5	; 181
    1f54:	ff 4f       	sbci	r31, 0xFF	; 255
    1f56:	80 81       	ld	r24, Z
    1f58:	91 81       	ldd	r25, Z+1	; 0x01
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	11 96       	adiw	r26, 0x01	; 1
    1f5e:	9c 93       	st	X, r25
    1f60:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	fe 01       	movw	r30, r28
    1f64:	e5 5b       	subi	r30, 0xB5	; 181
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	00 97       	sbiw	r24, 0x00	; 0
    1f6e:	d1 f6       	brne	.-76     	; 0x1f24 <LCD_sendCommand+0x266>
    1f70:	27 c0       	rjmp	.+78     	; 0x1fc0 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f72:	8e 01       	movw	r16, r28
    1f74:	05 5b       	subi	r16, 0xB5	; 181
    1f76:	1f 4f       	sbci	r17, 0xFF	; 255
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e3 5b       	subi	r30, 0xB3	; 179
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	60 81       	ld	r22, Z
    1f80:	71 81       	ldd	r23, Z+1	; 0x01
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	93 81       	ldd	r25, Z+3	; 0x03
    1f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	f8 01       	movw	r30, r16
    1f90:	91 83       	std	Z+1, r25	; 0x01
    1f92:	80 83       	st	Z, r24
    1f94:	de 01       	movw	r26, r28
    1f96:	a9 5b       	subi	r26, 0xB9	; 185
    1f98:	bf 4f       	sbci	r27, 0xFF	; 255
    1f9a:	fe 01       	movw	r30, r28
    1f9c:	e5 5b       	subi	r30, 0xB5	; 181
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	80 81       	ld	r24, Z
    1fa2:	91 81       	ldd	r25, Z+1	; 0x01
    1fa4:	8d 93       	st	X+, r24
    1fa6:	9c 93       	st	X, r25
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e9 5b       	subi	r30, 0xB9	; 185
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 81       	ld	r24, Z
    1fb0:	91 81       	ldd	r25, Z+1	; 0x01
    1fb2:	01 97       	sbiw	r24, 0x01	; 1
    1fb4:	f1 f7       	brne	.-4      	; 0x1fb2 <LCD_sendCommand+0x2f4>
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e9 5b       	subi	r30, 0xB9	; 185
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	91 83       	std	Z+1, r25	; 0x01
    1fbe:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	ed 59       	subi	r30, 0x9D	; 157
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	80 81       	ld	r24, Z
    1fc8:	82 95       	swap	r24
    1fca:	8f 70       	andi	r24, 0x0F	; 15
    1fcc:	98 2f       	mov	r25, r24
    1fce:	91 70       	andi	r25, 0x01	; 1
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	63 e0       	ldi	r22, 0x03	; 3
    1fd4:	49 2f       	mov	r20, r25
    1fd6:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ed 59       	subi	r30, 0x9D	; 157
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 81       	ld	r24, Z
    1fe2:	82 95       	swap	r24
    1fe4:	86 95       	lsr	r24
    1fe6:	87 70       	andi	r24, 0x07	; 7
    1fe8:	98 2f       	mov	r25, r24
    1fea:	91 70       	andi	r25, 0x01	; 1
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	64 e0       	ldi	r22, 0x04	; 4
    1ff0:	49 2f       	mov	r20, r25
    1ff2:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ed 59       	subi	r30, 0x9D	; 157
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	82 95       	swap	r24
    2000:	86 95       	lsr	r24
    2002:	86 95       	lsr	r24
    2004:	83 70       	andi	r24, 0x03	; 3
    2006:	98 2f       	mov	r25, r24
    2008:	91 70       	andi	r25, 0x01	; 1
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	65 e0       	ldi	r22, 0x05	; 5
    200e:	49 2f       	mov	r20, r25
    2010:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2014:	fe 01       	movw	r30, r28
    2016:	ed 59       	subi	r30, 0x9D	; 157
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	98 2f       	mov	r25, r24
    201e:	99 1f       	adc	r25, r25
    2020:	99 27       	eor	r25, r25
    2022:	99 1f       	adc	r25, r25
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	66 e0       	ldi	r22, 0x06	; 6
    2028:	49 2f       	mov	r20, r25
    202a:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    202e:	fe 01       	movw	r30, r28
    2030:	ed 5b       	subi	r30, 0xBD	; 189
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e8       	ldi	r26, 0x80	; 128
    203a:	bf e3       	ldi	r27, 0x3F	; 63
    203c:	80 83       	st	Z, r24
    203e:	91 83       	std	Z+1, r25	; 0x01
    2040:	a2 83       	std	Z+2, r26	; 0x02
    2042:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2044:	8e 01       	movw	r16, r28
    2046:	01 5c       	subi	r16, 0xC1	; 193
    2048:	1f 4f       	sbci	r17, 0xFF	; 255
    204a:	fe 01       	movw	r30, r28
    204c:	ed 5b       	subi	r30, 0xBD	; 189
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	60 81       	ld	r22, Z
    2052:	71 81       	ldd	r23, Z+1	; 0x01
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a ef       	ldi	r20, 0xFA	; 250
    205e:	54 e4       	ldi	r21, 0x44	; 68
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	f8 01       	movw	r30, r16
    206a:	80 83       	st	Z, r24
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	a2 83       	std	Z+2, r26	; 0x02
    2070:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2072:	fe 01       	movw	r30, r28
    2074:	ff 96       	adiw	r30, 0x3f	; 63
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	2c f4       	brge	.+10     	; 0x2098 <LCD_sendCommand+0x3da>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9e af       	std	Y+62, r25	; 0x3e
    2094:	8d af       	std	Y+61, r24	; 0x3d
    2096:	46 c0       	rjmp	.+140    	; 0x2124 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    2098:	fe 01       	movw	r30, r28
    209a:	ff 96       	adiw	r30, 0x3f	; 63
    209c:	60 81       	ld	r22, Z
    209e:	71 81       	ldd	r23, Z+1	; 0x01
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	64 f5       	brge	.+88     	; 0x210c <LCD_sendCommand+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	fe 01       	movw	r30, r28
    20b6:	ed 5b       	subi	r30, 0xBD	; 189
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	40 e2       	ldi	r20, 0x20	; 32
    20c8:	51 e4       	ldi	r21, 0x41	; 65
    20ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	9e af       	std	Y+62, r25	; 0x3e
    20e0:	8d af       	std	Y+61, r24	; 0x3d
    20e2:	0f c0       	rjmp	.+30     	; 0x2102 <LCD_sendCommand+0x444>
    20e4:	88 ec       	ldi	r24, 0xC8	; 200
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	9c af       	std	Y+60, r25	; 0x3c
    20ea:	8b af       	std	Y+59, r24	; 0x3b
    20ec:	8b ad       	ldd	r24, Y+59	; 0x3b
    20ee:	9c ad       	ldd	r25, Y+60	; 0x3c
    20f0:	01 97       	sbiw	r24, 0x01	; 1
    20f2:	f1 f7       	brne	.-4      	; 0x20f0 <LCD_sendCommand+0x432>
    20f4:	9c af       	std	Y+60, r25	; 0x3c
    20f6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    20fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	9e af       	std	Y+62, r25	; 0x3e
    2100:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2102:	8d ad       	ldd	r24, Y+61	; 0x3d
    2104:	9e ad       	ldd	r25, Y+62	; 0x3e
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	69 f7       	brne	.-38     	; 0x20e4 <LCD_sendCommand+0x426>
    210a:	16 c0       	rjmp	.+44     	; 0x2138 <LCD_sendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210c:	fe 01       	movw	r30, r28
    210e:	ff 96       	adiw	r30, 0x3f	; 63
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	9e af       	std	Y+62, r25	; 0x3e
    2122:	8d af       	std	Y+61, r24	; 0x3d
    2124:	8d ad       	ldd	r24, Y+61	; 0x3d
    2126:	9e ad       	ldd	r25, Y+62	; 0x3e
    2128:	9a af       	std	Y+58, r25	; 0x3a
    212a:	89 af       	std	Y+57, r24	; 0x39
    212c:	89 ad       	ldd	r24, Y+57	; 0x39
    212e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	f1 f7       	brne	.-4      	; 0x2130 <LCD_sendCommand+0x472>
    2134:	9a af       	std	Y+58, r25	; 0x3a
    2136:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	62 e0       	ldi	r22, 0x02	; 2
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	a0 e8       	ldi	r26, 0x80	; 128
    2148:	bf e3       	ldi	r27, 0x3F	; 63
    214a:	8d ab       	std	Y+53, r24	; 0x35
    214c:	9e ab       	std	Y+54, r25	; 0x36
    214e:	af ab       	std	Y+55, r26	; 0x37
    2150:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2152:	6d a9       	ldd	r22, Y+53	; 0x35
    2154:	7e a9       	ldd	r23, Y+54	; 0x36
    2156:	8f a9       	ldd	r24, Y+55	; 0x37
    2158:	98 ad       	ldd	r25, Y+56	; 0x38
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	4a ef       	ldi	r20, 0xFA	; 250
    2160:	54 e4       	ldi	r21, 0x44	; 68
    2162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	89 ab       	std	Y+49, r24	; 0x31
    216c:	9a ab       	std	Y+50, r25	; 0x32
    216e:	ab ab       	std	Y+51, r26	; 0x33
    2170:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2172:	69 a9       	ldd	r22, Y+49	; 0x31
    2174:	7a a9       	ldd	r23, Y+50	; 0x32
    2176:	8b a9       	ldd	r24, Y+51	; 0x33
    2178:	9c a9       	ldd	r25, Y+52	; 0x34
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	40 e8       	ldi	r20, 0x80	; 128
    2180:	5f e3       	ldi	r21, 0x3F	; 63
    2182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2186:	88 23       	and	r24, r24
    2188:	2c f4       	brge	.+10     	; 0x2194 <LCD_sendCommand+0x4d6>
		__ticks = 1;
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	98 ab       	std	Y+48, r25	; 0x30
    2190:	8f a7       	std	Y+47, r24	; 0x2f
    2192:	3f c0       	rjmp	.+126    	; 0x2212 <LCD_sendCommand+0x554>
	else if (__tmp > 65535)
    2194:	69 a9       	ldd	r22, Y+49	; 0x31
    2196:	7a a9       	ldd	r23, Y+50	; 0x32
    2198:	8b a9       	ldd	r24, Y+51	; 0x33
    219a:	9c a9       	ldd	r25, Y+52	; 0x34
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	3f ef       	ldi	r19, 0xFF	; 255
    21a0:	4f e7       	ldi	r20, 0x7F	; 127
    21a2:	57 e4       	ldi	r21, 0x47	; 71
    21a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21a8:	18 16       	cp	r1, r24
    21aa:	4c f5       	brge	.+82     	; 0x21fe <LCD_sendCommand+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ac:	6d a9       	ldd	r22, Y+53	; 0x35
    21ae:	7e a9       	ldd	r23, Y+54	; 0x36
    21b0:	8f a9       	ldd	r24, Y+55	; 0x37
    21b2:	98 ad       	ldd	r25, Y+56	; 0x38
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	40 e2       	ldi	r20, 0x20	; 32
    21ba:	51 e4       	ldi	r21, 0x41	; 65
    21bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	bc 01       	movw	r22, r24
    21c6:	cd 01       	movw	r24, r26
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	98 ab       	std	Y+48, r25	; 0x30
    21d2:	8f a7       	std	Y+47, r24	; 0x2f
    21d4:	0f c0       	rjmp	.+30     	; 0x21f4 <LCD_sendCommand+0x536>
    21d6:	88 ec       	ldi	r24, 0xC8	; 200
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9e a7       	std	Y+46, r25	; 0x2e
    21dc:	8d a7       	std	Y+45, r24	; 0x2d
    21de:	8d a5       	ldd	r24, Y+45	; 0x2d
    21e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_sendCommand+0x524>
    21e6:	9e a7       	std	Y+46, r25	; 0x2e
    21e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ec:	98 a9       	ldd	r25, Y+48	; 0x30
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	98 ab       	std	Y+48, r25	; 0x30
    21f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f6:	98 a9       	ldd	r25, Y+48	; 0x30
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	69 f7       	brne	.-38     	; 0x21d6 <LCD_sendCommand+0x518>
    21fc:	14 c0       	rjmp	.+40     	; 0x2226 <LCD_sendCommand+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2200:	7a a9       	ldd	r23, Y+50	; 0x32
    2202:	8b a9       	ldd	r24, Y+51	; 0x33
    2204:	9c a9       	ldd	r25, Y+52	; 0x34
    2206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	98 ab       	std	Y+48, r25	; 0x30
    2210:	8f a7       	std	Y+47, r24	; 0x2f
    2212:	8f a5       	ldd	r24, Y+47	; 0x2f
    2214:	98 a9       	ldd	r25, Y+48	; 0x30
    2216:	9c a7       	std	Y+44, r25	; 0x2c
    2218:	8b a7       	std	Y+43, r24	; 0x2b
    221a:	8b a5       	ldd	r24, Y+43	; 0x2b
    221c:	9c a5       	ldd	r25, Y+44	; 0x2c
    221e:	01 97       	sbiw	r24, 0x01	; 1
    2220:	f1 f7       	brne	.-4      	; 0x221e <LCD_sendCommand+0x560>
    2222:	9c a7       	std	Y+44, r25	; 0x2c
    2224:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	62 e0       	ldi	r22, 0x02	; 2
    222a:	41 e0       	ldi	r20, 0x01	; 1
    222c:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    2230:	80 e0       	ldi	r24, 0x00	; 0
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	a0 e8       	ldi	r26, 0x80	; 128
    2236:	bf e3       	ldi	r27, 0x3F	; 63
    2238:	8f a3       	std	Y+39, r24	; 0x27
    223a:	98 a7       	std	Y+40, r25	; 0x28
    223c:	a9 a7       	std	Y+41, r26	; 0x29
    223e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2240:	6f a1       	ldd	r22, Y+39	; 0x27
    2242:	78 a5       	ldd	r23, Y+40	; 0x28
    2244:	89 a5       	ldd	r24, Y+41	; 0x29
    2246:	9a a5       	ldd	r25, Y+42	; 0x2a
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	4a ef       	ldi	r20, 0xFA	; 250
    224e:	54 e4       	ldi	r21, 0x44	; 68
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	8b a3       	std	Y+35, r24	; 0x23
    225a:	9c a3       	std	Y+36, r25	; 0x24
    225c:	ad a3       	std	Y+37, r26	; 0x25
    225e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2260:	6b a1       	ldd	r22, Y+35	; 0x23
    2262:	7c a1       	ldd	r23, Y+36	; 0x24
    2264:	8d a1       	ldd	r24, Y+37	; 0x25
    2266:	9e a1       	ldd	r25, Y+38	; 0x26
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e8       	ldi	r20, 0x80	; 128
    226e:	5f e3       	ldi	r21, 0x3F	; 63
    2270:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2274:	88 23       	and	r24, r24
    2276:	2c f4       	brge	.+10     	; 0x2282 <LCD_sendCommand+0x5c4>
		__ticks = 1;
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	9a a3       	std	Y+34, r25	; 0x22
    227e:	89 a3       	std	Y+33, r24	; 0x21
    2280:	3f c0       	rjmp	.+126    	; 0x2300 <LCD_sendCommand+0x642>
	else if (__tmp > 65535)
    2282:	6b a1       	ldd	r22, Y+35	; 0x23
    2284:	7c a1       	ldd	r23, Y+36	; 0x24
    2286:	8d a1       	ldd	r24, Y+37	; 0x25
    2288:	9e a1       	ldd	r25, Y+38	; 0x26
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	3f ef       	ldi	r19, 0xFF	; 255
    228e:	4f e7       	ldi	r20, 0x7F	; 127
    2290:	57 e4       	ldi	r21, 0x47	; 71
    2292:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2296:	18 16       	cp	r1, r24
    2298:	4c f5       	brge	.+82     	; 0x22ec <LCD_sendCommand+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    229a:	6f a1       	ldd	r22, Y+39	; 0x27
    229c:	78 a5       	ldd	r23, Y+40	; 0x28
    229e:	89 a5       	ldd	r24, Y+41	; 0x29
    22a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e2       	ldi	r20, 0x20	; 32
    22a8:	51 e4       	ldi	r21, 0x41	; 65
    22aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	bc 01       	movw	r22, r24
    22b4:	cd 01       	movw	r24, r26
    22b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	9a a3       	std	Y+34, r25	; 0x22
    22c0:	89 a3       	std	Y+33, r24	; 0x21
    22c2:	0f c0       	rjmp	.+30     	; 0x22e2 <LCD_sendCommand+0x624>
    22c4:	88 ec       	ldi	r24, 0xC8	; 200
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	98 a3       	std	Y+32, r25	; 0x20
    22ca:	8f 8f       	std	Y+31, r24	; 0x1f
    22cc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ce:	98 a1       	ldd	r25, Y+32	; 0x20
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <LCD_sendCommand+0x612>
    22d4:	98 a3       	std	Y+32, r25	; 0x20
    22d6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d8:	89 a1       	ldd	r24, Y+33	; 0x21
    22da:	9a a1       	ldd	r25, Y+34	; 0x22
    22dc:	01 97       	sbiw	r24, 0x01	; 1
    22de:	9a a3       	std	Y+34, r25	; 0x22
    22e0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e2:	89 a1       	ldd	r24, Y+33	; 0x21
    22e4:	9a a1       	ldd	r25, Y+34	; 0x22
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	69 f7       	brne	.-38     	; 0x22c4 <LCD_sendCommand+0x606>
    22ea:	14 c0       	rjmp	.+40     	; 0x2314 <LCD_sendCommand+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ec:	6b a1       	ldd	r22, Y+35	; 0x23
    22ee:	7c a1       	ldd	r23, Y+36	; 0x24
    22f0:	8d a1       	ldd	r24, Y+37	; 0x25
    22f2:	9e a1       	ldd	r25, Y+38	; 0x26
    22f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f8:	dc 01       	movw	r26, r24
    22fa:	cb 01       	movw	r24, r22
    22fc:	9a a3       	std	Y+34, r25	; 0x22
    22fe:	89 a3       	std	Y+33, r24	; 0x21
    2300:	89 a1       	ldd	r24, Y+33	; 0x21
    2302:	9a a1       	ldd	r25, Y+34	; 0x22
    2304:	9e 8f       	std	Y+30, r25	; 0x1e
    2306:	8d 8f       	std	Y+29, r24	; 0x1d
    2308:	8d 8d       	ldd	r24, Y+29	; 0x1d
    230a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	f1 f7       	brne	.-4      	; 0x230c <LCD_sendCommand+0x64e>
    2310:	9e 8f       	std	Y+30, r25	; 0x1e
    2312:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2314:	fe 01       	movw	r30, r28
    2316:	ed 59       	subi	r30, 0x9D	; 157
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	98 2f       	mov	r25, r24
    231e:	91 70       	andi	r25, 0x01	; 1
    2320:	80 e0       	ldi	r24, 0x00	; 0
    2322:	63 e0       	ldi	r22, 0x03	; 3
    2324:	49 2f       	mov	r20, r25
    2326:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    232a:	fe 01       	movw	r30, r28
    232c:	ed 59       	subi	r30, 0x9D	; 157
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	80 81       	ld	r24, Z
    2332:	86 95       	lsr	r24
    2334:	98 2f       	mov	r25, r24
    2336:	91 70       	andi	r25, 0x01	; 1
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	64 e0       	ldi	r22, 0x04	; 4
    233c:	49 2f       	mov	r20, r25
    233e:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2342:	fe 01       	movw	r30, r28
    2344:	ed 59       	subi	r30, 0x9D	; 157
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	86 95       	lsr	r24
    234c:	86 95       	lsr	r24
    234e:	98 2f       	mov	r25, r24
    2350:	91 70       	andi	r25, 0x01	; 1
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	65 e0       	ldi	r22, 0x05	; 5
    2356:	49 2f       	mov	r20, r25
    2358:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    235c:	fe 01       	movw	r30, r28
    235e:	ed 59       	subi	r30, 0x9D	; 157
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	80 81       	ld	r24, Z
    2364:	86 95       	lsr	r24
    2366:	86 95       	lsr	r24
    2368:	86 95       	lsr	r24
    236a:	98 2f       	mov	r25, r24
    236c:	91 70       	andi	r25, 0x01	; 1
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	66 e0       	ldi	r22, 0x06	; 6
    2372:	49 2f       	mov	r20, r25
    2374:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e8       	ldi	r26, 0x80	; 128
    237e:	bf e3       	ldi	r27, 0x3F	; 63
    2380:	89 8f       	std	Y+25, r24	; 0x19
    2382:	9a 8f       	std	Y+26, r25	; 0x1a
    2384:	ab 8f       	std	Y+27, r26	; 0x1b
    2386:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2388:	69 8d       	ldd	r22, Y+25	; 0x19
    238a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    238c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    238e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	4a ef       	ldi	r20, 0xFA	; 250
    2396:	54 e4       	ldi	r21, 0x44	; 68
    2398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239c:	dc 01       	movw	r26, r24
    239e:	cb 01       	movw	r24, r22
    23a0:	8d 8b       	std	Y+21, r24	; 0x15
    23a2:	9e 8b       	std	Y+22, r25	; 0x16
    23a4:	af 8b       	std	Y+23, r26	; 0x17
    23a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23a8:	6d 89       	ldd	r22, Y+21	; 0x15
    23aa:	7e 89       	ldd	r23, Y+22	; 0x16
    23ac:	8f 89       	ldd	r24, Y+23	; 0x17
    23ae:	98 8d       	ldd	r25, Y+24	; 0x18
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e8       	ldi	r20, 0x80	; 128
    23b6:	5f e3       	ldi	r21, 0x3F	; 63
    23b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23bc:	88 23       	and	r24, r24
    23be:	2c f4       	brge	.+10     	; 0x23ca <LCD_sendCommand+0x70c>
		__ticks = 1;
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	9c 8b       	std	Y+20, r25	; 0x14
    23c6:	8b 8b       	std	Y+19, r24	; 0x13
    23c8:	3f c0       	rjmp	.+126    	; 0x2448 <LCD_sendCommand+0x78a>
	else if (__tmp > 65535)
    23ca:	6d 89       	ldd	r22, Y+21	; 0x15
    23cc:	7e 89       	ldd	r23, Y+22	; 0x16
    23ce:	8f 89       	ldd	r24, Y+23	; 0x17
    23d0:	98 8d       	ldd	r25, Y+24	; 0x18
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	3f ef       	ldi	r19, 0xFF	; 255
    23d6:	4f e7       	ldi	r20, 0x7F	; 127
    23d8:	57 e4       	ldi	r21, 0x47	; 71
    23da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23de:	18 16       	cp	r1, r24
    23e0:	4c f5       	brge	.+82     	; 0x2434 <LCD_sendCommand+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e2:	69 8d       	ldd	r22, Y+25	; 0x19
    23e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e2       	ldi	r20, 0x20	; 32
    23f0:	51 e4       	ldi	r21, 0x41	; 65
    23f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	bc 01       	movw	r22, r24
    23fc:	cd 01       	movw	r24, r26
    23fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	9c 8b       	std	Y+20, r25	; 0x14
    2408:	8b 8b       	std	Y+19, r24	; 0x13
    240a:	0f c0       	rjmp	.+30     	; 0x242a <LCD_sendCommand+0x76c>
    240c:	88 ec       	ldi	r24, 0xC8	; 200
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9a 8b       	std	Y+18, r25	; 0x12
    2412:	89 8b       	std	Y+17, r24	; 0x11
    2414:	89 89       	ldd	r24, Y+17	; 0x11
    2416:	9a 89       	ldd	r25, Y+18	; 0x12
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	f1 f7       	brne	.-4      	; 0x2418 <LCD_sendCommand+0x75a>
    241c:	9a 8b       	std	Y+18, r25	; 0x12
    241e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2420:	8b 89       	ldd	r24, Y+19	; 0x13
    2422:	9c 89       	ldd	r25, Y+20	; 0x14
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	9c 8b       	std	Y+20, r25	; 0x14
    2428:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242a:	8b 89       	ldd	r24, Y+19	; 0x13
    242c:	9c 89       	ldd	r25, Y+20	; 0x14
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	69 f7       	brne	.-38     	; 0x240c <LCD_sendCommand+0x74e>
    2432:	14 c0       	rjmp	.+40     	; 0x245c <LCD_sendCommand+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2434:	6d 89       	ldd	r22, Y+21	; 0x15
    2436:	7e 89       	ldd	r23, Y+22	; 0x16
    2438:	8f 89       	ldd	r24, Y+23	; 0x17
    243a:	98 8d       	ldd	r25, Y+24	; 0x18
    243c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	9c 8b       	std	Y+20, r25	; 0x14
    2446:	8b 8b       	std	Y+19, r24	; 0x13
    2448:	8b 89       	ldd	r24, Y+19	; 0x13
    244a:	9c 89       	ldd	r25, Y+20	; 0x14
    244c:	98 8b       	std	Y+16, r25	; 0x10
    244e:	8f 87       	std	Y+15, r24	; 0x0f
    2450:	8f 85       	ldd	r24, Y+15	; 0x0f
    2452:	98 89       	ldd	r25, Y+16	; 0x10
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <LCD_sendCommand+0x796>
    2458:	98 8b       	std	Y+16, r25	; 0x10
    245a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	62 e0       	ldi	r22, 0x02	; 2
    2460:	40 e0       	ldi	r20, 0x00	; 0
    2462:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a0 e8       	ldi	r26, 0x80	; 128
    246c:	bf e3       	ldi	r27, 0x3F	; 63
    246e:	8b 87       	std	Y+11, r24	; 0x0b
    2470:	9c 87       	std	Y+12, r25	; 0x0c
    2472:	ad 87       	std	Y+13, r26	; 0x0d
    2474:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2476:	6b 85       	ldd	r22, Y+11	; 0x0b
    2478:	7c 85       	ldd	r23, Y+12	; 0x0c
    247a:	8d 85       	ldd	r24, Y+13	; 0x0d
    247c:	9e 85       	ldd	r25, Y+14	; 0x0e
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	4a ef       	ldi	r20, 0xFA	; 250
    2484:	54 e4       	ldi	r21, 0x44	; 68
    2486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	8f 83       	std	Y+7, r24	; 0x07
    2490:	98 87       	std	Y+8, r25	; 0x08
    2492:	a9 87       	std	Y+9, r26	; 0x09
    2494:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2496:	6f 81       	ldd	r22, Y+7	; 0x07
    2498:	78 85       	ldd	r23, Y+8	; 0x08
    249a:	89 85       	ldd	r24, Y+9	; 0x09
    249c:	9a 85       	ldd	r25, Y+10	; 0x0a
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e8       	ldi	r20, 0x80	; 128
    24a4:	5f e3       	ldi	r21, 0x3F	; 63
    24a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	2c f4       	brge	.+10     	; 0x24b8 <LCD_sendCommand+0x7fa>
		__ticks = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9e 83       	std	Y+6, r25	; 0x06
    24b4:	8d 83       	std	Y+5, r24	; 0x05
    24b6:	3f c0       	rjmp	.+126    	; 0x2536 <LCD_sendCommand+0x878>
	else if (__tmp > 65535)
    24b8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ba:	78 85       	ldd	r23, Y+8	; 0x08
    24bc:	89 85       	ldd	r24, Y+9	; 0x09
    24be:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	3f ef       	ldi	r19, 0xFF	; 255
    24c4:	4f e7       	ldi	r20, 0x7F	; 127
    24c6:	57 e4       	ldi	r21, 0x47	; 71
    24c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24cc:	18 16       	cp	r1, r24
    24ce:	4c f5       	brge	.+82     	; 0x2522 <LCD_sendCommand+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e2       	ldi	r20, 0x20	; 32
    24de:	51 e4       	ldi	r21, 0x41	; 65
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9e 83       	std	Y+6, r25	; 0x06
    24f6:	8d 83       	std	Y+5, r24	; 0x05
    24f8:	0f c0       	rjmp	.+30     	; 0x2518 <LCD_sendCommand+0x85a>
    24fa:	88 ec       	ldi	r24, 0xC8	; 200
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	9c 83       	std	Y+4, r25	; 0x04
    2500:	8b 83       	std	Y+3, r24	; 0x03
    2502:	8b 81       	ldd	r24, Y+3	; 0x03
    2504:	9c 81       	ldd	r25, Y+4	; 0x04
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_sendCommand+0x848>
    250a:	9c 83       	std	Y+4, r25	; 0x04
    250c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250e:	8d 81       	ldd	r24, Y+5	; 0x05
    2510:	9e 81       	ldd	r25, Y+6	; 0x06
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	9e 83       	std	Y+6, r25	; 0x06
    2516:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2518:	8d 81       	ldd	r24, Y+5	; 0x05
    251a:	9e 81       	ldd	r25, Y+6	; 0x06
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	69 f7       	brne	.-38     	; 0x24fa <LCD_sendCommand+0x83c>
    2520:	14 c0       	rjmp	.+40     	; 0x254a <LCD_sendCommand+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2522:	6f 81       	ldd	r22, Y+7	; 0x07
    2524:	78 85       	ldd	r23, Y+8	; 0x08
    2526:	89 85       	ldd	r24, Y+9	; 0x09
    2528:	9a 85       	ldd	r25, Y+10	; 0x0a
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	9e 83       	std	Y+6, r25	; 0x06
    2534:	8d 83       	std	Y+5, r24	; 0x05
    2536:	8d 81       	ldd	r24, Y+5	; 0x05
    2538:	9e 81       	ldd	r25, Y+6	; 0x06
    253a:	9a 83       	std	Y+2, r25	; 0x02
    253c:	89 83       	std	Y+1, r24	; 0x01
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_sendCommand+0x884>
    2546:	9a 83       	std	Y+2, r25	; 0x02
    2548:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    254a:	cd 59       	subi	r28, 0x9D	; 157
    254c:	df 4f       	sbci	r29, 0xFF	; 255
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	1f 91       	pop	r17
    255e:	0f 91       	pop	r16
    2560:	08 95       	ret

00002562 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2562:	0f 93       	push	r16
    2564:	1f 93       	push	r17
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	cd b7       	in	r28, 0x3d	; 61
    256c:	de b7       	in	r29, 0x3e	; 62
    256e:	c3 56       	subi	r28, 0x63	; 99
    2570:	d0 40       	sbci	r29, 0x00	; 0
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	fe 01       	movw	r30, r28
    257e:	ed 59       	subi	r30, 0x9D	; 157
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	61 e0       	ldi	r22, 0x01	; 1
    2588:	41 e0       	ldi	r20, 0x01	; 1
    258a:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    258e:	fe 01       	movw	r30, r28
    2590:	e1 5a       	subi	r30, 0xA1	; 161
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 e0       	ldi	r24, 0x00	; 0
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	a0 e8       	ldi	r26, 0x80	; 128
    259a:	bf e3       	ldi	r27, 0x3F	; 63
    259c:	80 83       	st	Z, r24
    259e:	91 83       	std	Z+1, r25	; 0x01
    25a0:	a2 83       	std	Z+2, r26	; 0x02
    25a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a4:	8e 01       	movw	r16, r28
    25a6:	05 5a       	subi	r16, 0xA5	; 165
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
    25aa:	fe 01       	movw	r30, r28
    25ac:	e1 5a       	subi	r30, 0xA1	; 161
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4a ef       	ldi	r20, 0xFA	; 250
    25be:	54 e4       	ldi	r21, 0x44	; 68
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	f8 01       	movw	r30, r16
    25ca:	80 83       	st	Z, r24
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	a2 83       	std	Z+2, r26	; 0x02
    25d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25d2:	fe 01       	movw	r30, r28
    25d4:	e5 5a       	subi	r30, 0xA5	; 165
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e8       	ldi	r20, 0x80	; 128
    25e6:	5f e3       	ldi	r21, 0x3F	; 63
    25e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ec:	88 23       	and	r24, r24
    25ee:	44 f4       	brge	.+16     	; 0x2600 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    25f0:	fe 01       	movw	r30, r28
    25f2:	e7 5a       	subi	r30, 0xA7	; 167
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
    25fe:	64 c0       	rjmp	.+200    	; 0x26c8 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2600:	fe 01       	movw	r30, r28
    2602:	e5 5a       	subi	r30, 0xA5	; 165
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	60 81       	ld	r22, Z
    2608:	71 81       	ldd	r23, Z+1	; 0x01
    260a:	82 81       	ldd	r24, Z+2	; 0x02
    260c:	93 81       	ldd	r25, Z+3	; 0x03
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	3f ef       	ldi	r19, 0xFF	; 255
    2612:	4f e7       	ldi	r20, 0x7F	; 127
    2614:	57 e4       	ldi	r21, 0x47	; 71
    2616:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    261a:	18 16       	cp	r1, r24
    261c:	0c f0       	brlt	.+2      	; 0x2620 <LCD_displayCharacter+0xbe>
    261e:	43 c0       	rjmp	.+134    	; 0x26a6 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2620:	fe 01       	movw	r30, r28
    2622:	e1 5a       	subi	r30, 0xA1	; 161
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e2       	ldi	r20, 0x20	; 32
    2634:	51 e4       	ldi	r21, 0x41	; 65
    2636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	8e 01       	movw	r16, r28
    2640:	07 5a       	subi	r16, 0xA7	; 167
    2642:	1f 4f       	sbci	r17, 0xFF	; 255
    2644:	bc 01       	movw	r22, r24
    2646:	cd 01       	movw	r24, r26
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	f8 01       	movw	r30, r16
    2652:	91 83       	std	Z+1, r25	; 0x01
    2654:	80 83       	st	Z, r24
    2656:	1f c0       	rjmp	.+62     	; 0x2696 <LCD_displayCharacter+0x134>
    2658:	fe 01       	movw	r30, r28
    265a:	e9 5a       	subi	r30, 0xA9	; 169
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	88 ec       	ldi	r24, 0xC8	; 200
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	80 83       	st	Z, r24
    2666:	fe 01       	movw	r30, r28
    2668:	e9 5a       	subi	r30, 0xA9	; 169
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	91 81       	ldd	r25, Z+1	; 0x01
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <LCD_displayCharacter+0x10e>
    2674:	fe 01       	movw	r30, r28
    2676:	e9 5a       	subi	r30, 0xA9	; 169
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	de 01       	movw	r26, r28
    2680:	a7 5a       	subi	r26, 0xA7	; 167
    2682:	bf 4f       	sbci	r27, 0xFF	; 255
    2684:	fe 01       	movw	r30, r28
    2686:	e7 5a       	subi	r30, 0xA7	; 167
    2688:	ff 4f       	sbci	r31, 0xFF	; 255
    268a:	80 81       	ld	r24, Z
    268c:	91 81       	ldd	r25, Z+1	; 0x01
    268e:	01 97       	sbiw	r24, 0x01	; 1
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	9c 93       	st	X, r25
    2694:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2696:	fe 01       	movw	r30, r28
    2698:	e7 5a       	subi	r30, 0xA7	; 167
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	80 81       	ld	r24, Z
    269e:	91 81       	ldd	r25, Z+1	; 0x01
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	d1 f6       	brne	.-76     	; 0x2658 <LCD_displayCharacter+0xf6>
    26a4:	27 c0       	rjmp	.+78     	; 0x26f4 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a6:	8e 01       	movw	r16, r28
    26a8:	07 5a       	subi	r16, 0xA7	; 167
    26aa:	1f 4f       	sbci	r17, 0xFF	; 255
    26ac:	fe 01       	movw	r30, r28
    26ae:	e5 5a       	subi	r30, 0xA5	; 165
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	60 81       	ld	r22, Z
    26b4:	71 81       	ldd	r23, Z+1	; 0x01
    26b6:	82 81       	ldd	r24, Z+2	; 0x02
    26b8:	93 81       	ldd	r25, Z+3	; 0x03
    26ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	f8 01       	movw	r30, r16
    26c4:	91 83       	std	Z+1, r25	; 0x01
    26c6:	80 83       	st	Z, r24
    26c8:	de 01       	movw	r26, r28
    26ca:	ab 5a       	subi	r26, 0xAB	; 171
    26cc:	bf 4f       	sbci	r27, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	e7 5a       	subi	r30, 0xA7	; 167
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	91 81       	ldd	r25, Z+1	; 0x01
    26d8:	8d 93       	st	X+, r24
    26da:	9c 93       	st	X, r25
    26dc:	fe 01       	movw	r30, r28
    26de:	eb 5a       	subi	r30, 0xAB	; 171
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	80 81       	ld	r24, Z
    26e4:	91 81       	ldd	r25, Z+1	; 0x01
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <LCD_displayCharacter+0x184>
    26ea:	fe 01       	movw	r30, r28
    26ec:	eb 5a       	subi	r30, 0xAB	; 171
    26ee:	ff 4f       	sbci	r31, 0xFF	; 255
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	62 e0       	ldi	r22, 0x02	; 2
    26f8:	41 e0       	ldi	r20, 0x01	; 1
    26fa:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    26fe:	fe 01       	movw	r30, r28
    2700:	ef 5a       	subi	r30, 0xAF	; 175
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a0 e8       	ldi	r26, 0x80	; 128
    270a:	bf e3       	ldi	r27, 0x3F	; 63
    270c:	80 83       	st	Z, r24
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	a2 83       	std	Z+2, r26	; 0x02
    2712:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2714:	8e 01       	movw	r16, r28
    2716:	03 5b       	subi	r16, 0xB3	; 179
    2718:	1f 4f       	sbci	r17, 0xFF	; 255
    271a:	fe 01       	movw	r30, r28
    271c:	ef 5a       	subi	r30, 0xAF	; 175
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	f8 01       	movw	r30, r16
    273a:	80 83       	st	Z, r24
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	a2 83       	std	Z+2, r26	; 0x02
    2740:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2742:	fe 01       	movw	r30, r28
    2744:	e3 5b       	subi	r30, 0xB3	; 179
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	60 81       	ld	r22, Z
    274a:	71 81       	ldd	r23, Z+1	; 0x01
    274c:	82 81       	ldd	r24, Z+2	; 0x02
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	44 f4       	brge	.+16     	; 0x2770 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2760:	fe 01       	movw	r30, r28
    2762:	e5 5b       	subi	r30, 0xB5	; 181
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	80 83       	st	Z, r24
    276e:	64 c0       	rjmp	.+200    	; 0x2838 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2770:	fe 01       	movw	r30, r28
    2772:	e3 5b       	subi	r30, 0xB3	; 179
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	60 81       	ld	r22, Z
    2778:	71 81       	ldd	r23, Z+1	; 0x01
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	3f ef       	ldi	r19, 0xFF	; 255
    2782:	4f e7       	ldi	r20, 0x7F	; 127
    2784:	57 e4       	ldi	r21, 0x47	; 71
    2786:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    278a:	18 16       	cp	r1, r24
    278c:	0c f0       	brlt	.+2      	; 0x2790 <LCD_displayCharacter+0x22e>
    278e:	43 c0       	rjmp	.+134    	; 0x2816 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	fe 01       	movw	r30, r28
    2792:	ef 5a       	subi	r30, 0xAF	; 175
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e2       	ldi	r20, 0x20	; 32
    27a4:	51 e4       	ldi	r21, 0x41	; 65
    27a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	8e 01       	movw	r16, r28
    27b0:	05 5b       	subi	r16, 0xB5	; 181
    27b2:	1f 4f       	sbci	r17, 0xFF	; 255
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	f8 01       	movw	r30, r16
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
    27c6:	1f c0       	rjmp	.+62     	; 0x2806 <LCD_displayCharacter+0x2a4>
    27c8:	fe 01       	movw	r30, r28
    27ca:	e7 5b       	subi	r30, 0xB7	; 183
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	88 ec       	ldi	r24, 0xC8	; 200
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	91 83       	std	Z+1, r25	; 0x01
    27d4:	80 83       	st	Z, r24
    27d6:	fe 01       	movw	r30, r28
    27d8:	e7 5b       	subi	r30, 0xB7	; 183
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <LCD_displayCharacter+0x27e>
    27e4:	fe 01       	movw	r30, r28
    27e6:	e7 5b       	subi	r30, 0xB7	; 183
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	de 01       	movw	r26, r28
    27f0:	a5 5b       	subi	r26, 0xB5	; 181
    27f2:	bf 4f       	sbci	r27, 0xFF	; 255
    27f4:	fe 01       	movw	r30, r28
    27f6:	e5 5b       	subi	r30, 0xB5	; 181
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	80 81       	ld	r24, Z
    27fc:	91 81       	ldd	r25, Z+1	; 0x01
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	11 96       	adiw	r26, 0x01	; 1
    2802:	9c 93       	st	X, r25
    2804:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2806:	fe 01       	movw	r30, r28
    2808:	e5 5b       	subi	r30, 0xB5	; 181
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	d1 f6       	brne	.-76     	; 0x27c8 <LCD_displayCharacter+0x266>
    2814:	27 c0       	rjmp	.+78     	; 0x2864 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2816:	8e 01       	movw	r16, r28
    2818:	05 5b       	subi	r16, 0xB5	; 181
    281a:	1f 4f       	sbci	r17, 0xFF	; 255
    281c:	fe 01       	movw	r30, r28
    281e:	e3 5b       	subi	r30, 0xB3	; 179
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	f8 01       	movw	r30, r16
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	80 83       	st	Z, r24
    2838:	de 01       	movw	r26, r28
    283a:	a9 5b       	subi	r26, 0xB9	; 185
    283c:	bf 4f       	sbci	r27, 0xFF	; 255
    283e:	fe 01       	movw	r30, r28
    2840:	e5 5b       	subi	r30, 0xB5	; 181
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	8d 93       	st	X+, r24
    284a:	9c 93       	st	X, r25
    284c:	fe 01       	movw	r30, r28
    284e:	e9 5b       	subi	r30, 0xB9	; 185
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <LCD_displayCharacter+0x2f4>
    285a:	fe 01       	movw	r30, r28
    285c:	e9 5b       	subi	r30, 0xB9	; 185
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	91 83       	std	Z+1, r25	; 0x01
    2862:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2864:	fe 01       	movw	r30, r28
    2866:	ed 59       	subi	r30, 0x9D	; 157
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	82 95       	swap	r24
    286e:	8f 70       	andi	r24, 0x0F	; 15
    2870:	98 2f       	mov	r25, r24
    2872:	91 70       	andi	r25, 0x01	; 1
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	63 e0       	ldi	r22, 0x03	; 3
    2878:	49 2f       	mov	r20, r25
    287a:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    287e:	fe 01       	movw	r30, r28
    2880:	ed 59       	subi	r30, 0x9D	; 157
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	80 81       	ld	r24, Z
    2886:	82 95       	swap	r24
    2888:	86 95       	lsr	r24
    288a:	87 70       	andi	r24, 0x07	; 7
    288c:	98 2f       	mov	r25, r24
    288e:	91 70       	andi	r25, 0x01	; 1
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	64 e0       	ldi	r22, 0x04	; 4
    2894:	49 2f       	mov	r20, r25
    2896:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    289a:	fe 01       	movw	r30, r28
    289c:	ed 59       	subi	r30, 0x9D	; 157
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	82 95       	swap	r24
    28a4:	86 95       	lsr	r24
    28a6:	86 95       	lsr	r24
    28a8:	83 70       	andi	r24, 0x03	; 3
    28aa:	98 2f       	mov	r25, r24
    28ac:	91 70       	andi	r25, 0x01	; 1
    28ae:	80 e0       	ldi	r24, 0x00	; 0
    28b0:	65 e0       	ldi	r22, 0x05	; 5
    28b2:	49 2f       	mov	r20, r25
    28b4:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    28b8:	fe 01       	movw	r30, r28
    28ba:	ed 59       	subi	r30, 0x9D	; 157
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	80 81       	ld	r24, Z
    28c0:	98 2f       	mov	r25, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	99 27       	eor	r25, r25
    28c6:	99 1f       	adc	r25, r25
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	66 e0       	ldi	r22, 0x06	; 6
    28cc:	49 2f       	mov	r20, r25
    28ce:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    28d2:	fe 01       	movw	r30, r28
    28d4:	ed 5b       	subi	r30, 0xBD	; 189
    28d6:	ff 4f       	sbci	r31, 0xFF	; 255
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	a0 e8       	ldi	r26, 0x80	; 128
    28de:	bf e3       	ldi	r27, 0x3F	; 63
    28e0:	80 83       	st	Z, r24
    28e2:	91 83       	std	Z+1, r25	; 0x01
    28e4:	a2 83       	std	Z+2, r26	; 0x02
    28e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e8:	8e 01       	movw	r16, r28
    28ea:	01 5c       	subi	r16, 0xC1	; 193
    28ec:	1f 4f       	sbci	r17, 0xFF	; 255
    28ee:	fe 01       	movw	r30, r28
    28f0:	ed 5b       	subi	r30, 0xBD	; 189
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	60 81       	ld	r22, Z
    28f6:	71 81       	ldd	r23, Z+1	; 0x01
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	4a ef       	ldi	r20, 0xFA	; 250
    2902:	54 e4       	ldi	r21, 0x44	; 68
    2904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	f8 01       	movw	r30, r16
    290e:	80 83       	st	Z, r24
    2910:	91 83       	std	Z+1, r25	; 0x01
    2912:	a2 83       	std	Z+2, r26	; 0x02
    2914:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2916:	fe 01       	movw	r30, r28
    2918:	ff 96       	adiw	r30, 0x3f	; 63
    291a:	60 81       	ld	r22, Z
    291c:	71 81       	ldd	r23, Z+1	; 0x01
    291e:	82 81       	ldd	r24, Z+2	; 0x02
    2920:	93 81       	ldd	r25, Z+3	; 0x03
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e8       	ldi	r20, 0x80	; 128
    2928:	5f e3       	ldi	r21, 0x3F	; 63
    292a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292e:	88 23       	and	r24, r24
    2930:	2c f4       	brge	.+10     	; 0x293c <LCD_displayCharacter+0x3da>
		__ticks = 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9e af       	std	Y+62, r25	; 0x3e
    2938:	8d af       	std	Y+61, r24	; 0x3d
    293a:	46 c0       	rjmp	.+140    	; 0x29c8 <LCD_displayCharacter+0x466>
	else if (__tmp > 65535)
    293c:	fe 01       	movw	r30, r28
    293e:	ff 96       	adiw	r30, 0x3f	; 63
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	3f ef       	ldi	r19, 0xFF	; 255
    294c:	4f e7       	ldi	r20, 0x7F	; 127
    294e:	57 e4       	ldi	r21, 0x47	; 71
    2950:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2954:	18 16       	cp	r1, r24
    2956:	64 f5       	brge	.+88     	; 0x29b0 <LCD_displayCharacter+0x44e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2958:	fe 01       	movw	r30, r28
    295a:	ed 5b       	subi	r30, 0xBD	; 189
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	60 81       	ld	r22, Z
    2960:	71 81       	ldd	r23, Z+1	; 0x01
    2962:	82 81       	ldd	r24, Z+2	; 0x02
    2964:	93 81       	ldd	r25, Z+3	; 0x03
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e2       	ldi	r20, 0x20	; 32
    296c:	51 e4       	ldi	r21, 0x41	; 65
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	bc 01       	movw	r22, r24
    2978:	cd 01       	movw	r24, r26
    297a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	9e af       	std	Y+62, r25	; 0x3e
    2984:	8d af       	std	Y+61, r24	; 0x3d
    2986:	0f c0       	rjmp	.+30     	; 0x29a6 <LCD_displayCharacter+0x444>
    2988:	88 ec       	ldi	r24, 0xC8	; 200
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	9c af       	std	Y+60, r25	; 0x3c
    298e:	8b af       	std	Y+59, r24	; 0x3b
    2990:	8b ad       	ldd	r24, Y+59	; 0x3b
    2992:	9c ad       	ldd	r25, Y+60	; 0x3c
    2994:	01 97       	sbiw	r24, 0x01	; 1
    2996:	f1 f7       	brne	.-4      	; 0x2994 <LCD_displayCharacter+0x432>
    2998:	9c af       	std	Y+60, r25	; 0x3c
    299a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299c:	8d ad       	ldd	r24, Y+61	; 0x3d
    299e:	9e ad       	ldd	r25, Y+62	; 0x3e
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	9e af       	std	Y+62, r25	; 0x3e
    29a4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	69 f7       	brne	.-38     	; 0x2988 <LCD_displayCharacter+0x426>
    29ae:	16 c0       	rjmp	.+44     	; 0x29dc <LCD_displayCharacter+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b0:	fe 01       	movw	r30, r28
    29b2:	ff 96       	adiw	r30, 0x3f	; 63
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	82 81       	ldd	r24, Z+2	; 0x02
    29ba:	93 81       	ldd	r25, Z+3	; 0x03
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9e af       	std	Y+62, r25	; 0x3e
    29c6:	8d af       	std	Y+61, r24	; 0x3d
    29c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    29ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    29cc:	9a af       	std	Y+58, r25	; 0x3a
    29ce:	89 af       	std	Y+57, r24	; 0x39
    29d0:	89 ad       	ldd	r24, Y+57	; 0x39
    29d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_displayCharacter+0x472>
    29d8:	9a af       	std	Y+58, r25	; 0x3a
    29da:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	62 e0       	ldi	r22, 0x02	; 2
    29e0:	40 e0       	ldi	r20, 0x00	; 0
    29e2:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	a0 e8       	ldi	r26, 0x80	; 128
    29ec:	bf e3       	ldi	r27, 0x3F	; 63
    29ee:	8d ab       	std	Y+53, r24	; 0x35
    29f0:	9e ab       	std	Y+54, r25	; 0x36
    29f2:	af ab       	std	Y+55, r26	; 0x37
    29f4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f6:	6d a9       	ldd	r22, Y+53	; 0x35
    29f8:	7e a9       	ldd	r23, Y+54	; 0x36
    29fa:	8f a9       	ldd	r24, Y+55	; 0x37
    29fc:	98 ad       	ldd	r25, Y+56	; 0x38
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a ef       	ldi	r20, 0xFA	; 250
    2a04:	54 e4       	ldi	r21, 0x44	; 68
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	89 ab       	std	Y+49, r24	; 0x31
    2a10:	9a ab       	std	Y+50, r25	; 0x32
    2a12:	ab ab       	std	Y+51, r26	; 0x33
    2a14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a16:	69 a9       	ldd	r22, Y+49	; 0x31
    2a18:	7a a9       	ldd	r23, Y+50	; 0x32
    2a1a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a1c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	40 e8       	ldi	r20, 0x80	; 128
    2a24:	5f e3       	ldi	r21, 0x3F	; 63
    2a26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a2a:	88 23       	and	r24, r24
    2a2c:	2c f4       	brge	.+10     	; 0x2a38 <LCD_displayCharacter+0x4d6>
		__ticks = 1;
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	98 ab       	std	Y+48, r25	; 0x30
    2a34:	8f a7       	std	Y+47, r24	; 0x2f
    2a36:	3f c0       	rjmp	.+126    	; 0x2ab6 <LCD_displayCharacter+0x554>
	else if (__tmp > 65535)
    2a38:	69 a9       	ldd	r22, Y+49	; 0x31
    2a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	3f ef       	ldi	r19, 0xFF	; 255
    2a44:	4f e7       	ldi	r20, 0x7F	; 127
    2a46:	57 e4       	ldi	r21, 0x47	; 71
    2a48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4c:	18 16       	cp	r1, r24
    2a4e:	4c f5       	brge	.+82     	; 0x2aa2 <LCD_displayCharacter+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a50:	6d a9       	ldd	r22, Y+53	; 0x35
    2a52:	7e a9       	ldd	r23, Y+54	; 0x36
    2a54:	8f a9       	ldd	r24, Y+55	; 0x37
    2a56:	98 ad       	ldd	r25, Y+56	; 0x38
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	40 e2       	ldi	r20, 0x20	; 32
    2a5e:	51 e4       	ldi	r21, 0x41	; 65
    2a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a64:	dc 01       	movw	r26, r24
    2a66:	cb 01       	movw	r24, r22
    2a68:	bc 01       	movw	r22, r24
    2a6a:	cd 01       	movw	r24, r26
    2a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a70:	dc 01       	movw	r26, r24
    2a72:	cb 01       	movw	r24, r22
    2a74:	98 ab       	std	Y+48, r25	; 0x30
    2a76:	8f a7       	std	Y+47, r24	; 0x2f
    2a78:	0f c0       	rjmp	.+30     	; 0x2a98 <LCD_displayCharacter+0x536>
    2a7a:	88 ec       	ldi	r24, 0xC8	; 200
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	9e a7       	std	Y+46, r25	; 0x2e
    2a80:	8d a7       	std	Y+45, r24	; 0x2d
    2a82:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a84:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <LCD_displayCharacter+0x524>
    2a8a:	9e a7       	std	Y+46, r25	; 0x2e
    2a8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a90:	98 a9       	ldd	r25, Y+48	; 0x30
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	98 ab       	std	Y+48, r25	; 0x30
    2a96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a98:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a9a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	69 f7       	brne	.-38     	; 0x2a7a <LCD_displayCharacter+0x518>
    2aa0:	14 c0       	rjmp	.+40     	; 0x2aca <LCD_displayCharacter+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa2:	69 a9       	ldd	r22, Y+49	; 0x31
    2aa4:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa6:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa8:	9c a9       	ldd	r25, Y+52	; 0x34
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	98 ab       	std	Y+48, r25	; 0x30
    2ab4:	8f a7       	std	Y+47, r24	; 0x2f
    2ab6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ab8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aba:	9c a7       	std	Y+44, r25	; 0x2c
    2abc:	8b a7       	std	Y+43, r24	; 0x2b
    2abe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ac0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	f1 f7       	brne	.-4      	; 0x2ac2 <LCD_displayCharacter+0x560>
    2ac6:	9c a7       	std	Y+44, r25	; 0x2c
    2ac8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	62 e0       	ldi	r22, 0x02	; 2
    2ace:	41 e0       	ldi	r20, 0x01	; 1
    2ad0:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a0 e8       	ldi	r26, 0x80	; 128
    2ada:	bf e3       	ldi	r27, 0x3F	; 63
    2adc:	8f a3       	std	Y+39, r24	; 0x27
    2ade:	98 a7       	std	Y+40, r25	; 0x28
    2ae0:	a9 a7       	std	Y+41, r26	; 0x29
    2ae2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ae6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ae8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	4a ef       	ldi	r20, 0xFA	; 250
    2af2:	54 e4       	ldi	r21, 0x44	; 68
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	8b a3       	std	Y+35, r24	; 0x23
    2afe:	9c a3       	std	Y+36, r25	; 0x24
    2b00:	ad a3       	std	Y+37, r26	; 0x25
    2b02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b04:	6b a1       	ldd	r22, Y+35	; 0x23
    2b06:	7c a1       	ldd	r23, Y+36	; 0x24
    2b08:	8d a1       	ldd	r24, Y+37	; 0x25
    2b0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e8       	ldi	r20, 0x80	; 128
    2b12:	5f e3       	ldi	r21, 0x3F	; 63
    2b14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b18:	88 23       	and	r24, r24
    2b1a:	2c f4       	brge	.+10     	; 0x2b26 <LCD_displayCharacter+0x5c4>
		__ticks = 1;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9a a3       	std	Y+34, r25	; 0x22
    2b22:	89 a3       	std	Y+33, r24	; 0x21
    2b24:	3f c0       	rjmp	.+126    	; 0x2ba4 <LCD_displayCharacter+0x642>
	else if (__tmp > 65535)
    2b26:	6b a1       	ldd	r22, Y+35	; 0x23
    2b28:	7c a1       	ldd	r23, Y+36	; 0x24
    2b2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	3f ef       	ldi	r19, 0xFF	; 255
    2b32:	4f e7       	ldi	r20, 0x7F	; 127
    2b34:	57 e4       	ldi	r21, 0x47	; 71
    2b36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b3a:	18 16       	cp	r1, r24
    2b3c:	4c f5       	brge	.+82     	; 0x2b90 <LCD_displayCharacter+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b40:	78 a5       	ldd	r23, Y+40	; 0x28
    2b42:	89 a5       	ldd	r24, Y+41	; 0x29
    2b44:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e2       	ldi	r20, 0x20	; 32
    2b4c:	51 e4       	ldi	r21, 0x41	; 65
    2b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9a a3       	std	Y+34, r25	; 0x22
    2b64:	89 a3       	std	Y+33, r24	; 0x21
    2b66:	0f c0       	rjmp	.+30     	; 0x2b86 <LCD_displayCharacter+0x624>
    2b68:	88 ec       	ldi	r24, 0xC8	; 200
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	98 a3       	std	Y+32, r25	; 0x20
    2b6e:	8f 8f       	std	Y+31, r24	; 0x1f
    2b70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b72:	98 a1       	ldd	r25, Y+32	; 0x20
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <LCD_displayCharacter+0x612>
    2b78:	98 a3       	std	Y+32, r25	; 0x20
    2b7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	9a a3       	std	Y+34, r25	; 0x22
    2b84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b86:	89 a1       	ldd	r24, Y+33	; 0x21
    2b88:	9a a1       	ldd	r25, Y+34	; 0x22
    2b8a:	00 97       	sbiw	r24, 0x00	; 0
    2b8c:	69 f7       	brne	.-38     	; 0x2b68 <LCD_displayCharacter+0x606>
    2b8e:	14 c0       	rjmp	.+40     	; 0x2bb8 <LCD_displayCharacter+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b90:	6b a1       	ldd	r22, Y+35	; 0x23
    2b92:	7c a1       	ldd	r23, Y+36	; 0x24
    2b94:	8d a1       	ldd	r24, Y+37	; 0x25
    2b96:	9e a1       	ldd	r25, Y+38	; 0x26
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9a a3       	std	Y+34, r25	; 0x22
    2ba2:	89 a3       	std	Y+33, r24	; 0x21
    2ba4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ba6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ba8:	9e 8f       	std	Y+30, r25	; 0x1e
    2baa:	8d 8f       	std	Y+29, r24	; 0x1d
    2bac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <LCD_displayCharacter+0x64e>
    2bb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2bb6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2bb8:	fe 01       	movw	r30, r28
    2bba:	ed 59       	subi	r30, 0x9D	; 157
    2bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbe:	80 81       	ld	r24, Z
    2bc0:	98 2f       	mov	r25, r24
    2bc2:	91 70       	andi	r25, 0x01	; 1
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	63 e0       	ldi	r22, 0x03	; 3
    2bc8:	49 2f       	mov	r20, r25
    2bca:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2bce:	fe 01       	movw	r30, r28
    2bd0:	ed 59       	subi	r30, 0x9D	; 157
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 81       	ld	r24, Z
    2bd6:	86 95       	lsr	r24
    2bd8:	98 2f       	mov	r25, r24
    2bda:	91 70       	andi	r25, 0x01	; 1
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	64 e0       	ldi	r22, 0x04	; 4
    2be0:	49 2f       	mov	r20, r25
    2be2:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2be6:	fe 01       	movw	r30, r28
    2be8:	ed 59       	subi	r30, 0x9D	; 157
    2bea:	ff 4f       	sbci	r31, 0xFF	; 255
    2bec:	80 81       	ld	r24, Z
    2bee:	86 95       	lsr	r24
    2bf0:	86 95       	lsr	r24
    2bf2:	98 2f       	mov	r25, r24
    2bf4:	91 70       	andi	r25, 0x01	; 1
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	65 e0       	ldi	r22, 0x05	; 5
    2bfa:	49 2f       	mov	r20, r25
    2bfc:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2c00:	fe 01       	movw	r30, r28
    2c02:	ed 59       	subi	r30, 0x9D	; 157
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	80 81       	ld	r24, Z
    2c08:	86 95       	lsr	r24
    2c0a:	86 95       	lsr	r24
    2c0c:	86 95       	lsr	r24
    2c0e:	98 2f       	mov	r25, r24
    2c10:	91 70       	andi	r25, 0x01	; 1
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	66 e0       	ldi	r22, 0x06	; 6
    2c16:	49 2f       	mov	r20, r25
    2c18:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	90 e0       	ldi	r25, 0x00	; 0
    2c20:	a0 e8       	ldi	r26, 0x80	; 128
    2c22:	bf e3       	ldi	r27, 0x3F	; 63
    2c24:	89 8f       	std	Y+25, r24	; 0x19
    2c26:	9a 8f       	std	Y+26, r25	; 0x1a
    2c28:	ab 8f       	std	Y+27, r26	; 0x1b
    2c2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2c2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c34:	20 e0       	ldi	r18, 0x00	; 0
    2c36:	30 e0       	ldi	r19, 0x00	; 0
    2c38:	4a ef       	ldi	r20, 0xFA	; 250
    2c3a:	54 e4       	ldi	r21, 0x44	; 68
    2c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c40:	dc 01       	movw	r26, r24
    2c42:	cb 01       	movw	r24, r22
    2c44:	8d 8b       	std	Y+21, r24	; 0x15
    2c46:	9e 8b       	std	Y+22, r25	; 0x16
    2c48:	af 8b       	std	Y+23, r26	; 0x17
    2c4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c50:	8f 89       	ldd	r24, Y+23	; 0x17
    2c52:	98 8d       	ldd	r25, Y+24	; 0x18
    2c54:	20 e0       	ldi	r18, 0x00	; 0
    2c56:	30 e0       	ldi	r19, 0x00	; 0
    2c58:	40 e8       	ldi	r20, 0x80	; 128
    2c5a:	5f e3       	ldi	r21, 0x3F	; 63
    2c5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c60:	88 23       	and	r24, r24
    2c62:	2c f4       	brge	.+10     	; 0x2c6e <LCD_displayCharacter+0x70c>
		__ticks = 1;
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	9c 8b       	std	Y+20, r25	; 0x14
    2c6a:	8b 8b       	std	Y+19, r24	; 0x13
    2c6c:	3f c0       	rjmp	.+126    	; 0x2cec <LCD_displayCharacter+0x78a>
	else if (__tmp > 65535)
    2c6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2c70:	7e 89       	ldd	r23, Y+22	; 0x16
    2c72:	8f 89       	ldd	r24, Y+23	; 0x17
    2c74:	98 8d       	ldd	r25, Y+24	; 0x18
    2c76:	20 e0       	ldi	r18, 0x00	; 0
    2c78:	3f ef       	ldi	r19, 0xFF	; 255
    2c7a:	4f e7       	ldi	r20, 0x7F	; 127
    2c7c:	57 e4       	ldi	r21, 0x47	; 71
    2c7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c82:	18 16       	cp	r1, r24
    2c84:	4c f5       	brge	.+82     	; 0x2cd8 <LCD_displayCharacter+0x776>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c86:	69 8d       	ldd	r22, Y+25	; 0x19
    2c88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	40 e2       	ldi	r20, 0x20	; 32
    2c94:	51 e4       	ldi	r21, 0x41	; 65
    2c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	bc 01       	movw	r22, r24
    2ca0:	cd 01       	movw	r24, r26
    2ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	cb 01       	movw	r24, r22
    2caa:	9c 8b       	std	Y+20, r25	; 0x14
    2cac:	8b 8b       	std	Y+19, r24	; 0x13
    2cae:	0f c0       	rjmp	.+30     	; 0x2cce <LCD_displayCharacter+0x76c>
    2cb0:	88 ec       	ldi	r24, 0xC8	; 200
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	9a 8b       	std	Y+18, r25	; 0x12
    2cb6:	89 8b       	std	Y+17, r24	; 0x11
    2cb8:	89 89       	ldd	r24, Y+17	; 0x11
    2cba:	9a 89       	ldd	r25, Y+18	; 0x12
    2cbc:	01 97       	sbiw	r24, 0x01	; 1
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <LCD_displayCharacter+0x75a>
    2cc0:	9a 8b       	std	Y+18, r25	; 0x12
    2cc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	9c 8b       	std	Y+20, r25	; 0x14
    2ccc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cce:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	69 f7       	brne	.-38     	; 0x2cb0 <LCD_displayCharacter+0x74e>
    2cd6:	14 c0       	rjmp	.+40     	; 0x2d00 <LCD_displayCharacter+0x79e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cd8:	6d 89       	ldd	r22, Y+21	; 0x15
    2cda:	7e 89       	ldd	r23, Y+22	; 0x16
    2cdc:	8f 89       	ldd	r24, Y+23	; 0x17
    2cde:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	9c 8b       	std	Y+20, r25	; 0x14
    2cea:	8b 8b       	std	Y+19, r24	; 0x13
    2cec:	8b 89       	ldd	r24, Y+19	; 0x13
    2cee:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf0:	98 8b       	std	Y+16, r25	; 0x10
    2cf2:	8f 87       	std	Y+15, r24	; 0x0f
    2cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf6:	98 89       	ldd	r25, Y+16	; 0x10
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	f1 f7       	brne	.-4      	; 0x2cf8 <LCD_displayCharacter+0x796>
    2cfc:	98 8b       	std	Y+16, r25	; 0x10
    2cfe:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d00:	80 e0       	ldi	r24, 0x00	; 0
    2d02:	62 e0       	ldi	r22, 0x02	; 2
    2d04:	40 e0       	ldi	r20, 0x00	; 0
    2d06:	0e 94 c6 09 	call	0x138c	; 0x138c <GPIO_writePin>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a0 e8       	ldi	r26, 0x80	; 128
    2d10:	bf e3       	ldi	r27, 0x3F	; 63
    2d12:	8b 87       	std	Y+11, r24	; 0x0b
    2d14:	9c 87       	std	Y+12, r25	; 0x0c
    2d16:	ad 87       	std	Y+13, r26	; 0x0d
    2d18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	4a ef       	ldi	r20, 0xFA	; 250
    2d28:	54 e4       	ldi	r21, 0x44	; 68
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8f 83       	std	Y+7, r24	; 0x07
    2d34:	98 87       	std	Y+8, r25	; 0x08
    2d36:	a9 87       	std	Y+9, r26	; 0x09
    2d38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3c:	78 85       	ldd	r23, Y+8	; 0x08
    2d3e:	89 85       	ldd	r24, Y+9	; 0x09
    2d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e8       	ldi	r20, 0x80	; 128
    2d48:	5f e3       	ldi	r21, 0x3F	; 63
    2d4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d4e:	88 23       	and	r24, r24
    2d50:	2c f4       	brge	.+10     	; 0x2d5c <LCD_displayCharacter+0x7fa>
		__ticks = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9e 83       	std	Y+6, r25	; 0x06
    2d58:	8d 83       	std	Y+5, r24	; 0x05
    2d5a:	3f c0       	rjmp	.+126    	; 0x2dda <LCD_displayCharacter+0x878>
	else if (__tmp > 65535)
    2d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5e:	78 85       	ldd	r23, Y+8	; 0x08
    2d60:	89 85       	ldd	r24, Y+9	; 0x09
    2d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	3f ef       	ldi	r19, 0xFF	; 255
    2d68:	4f e7       	ldi	r20, 0x7F	; 127
    2d6a:	57 e4       	ldi	r21, 0x47	; 71
    2d6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d70:	18 16       	cp	r1, r24
    2d72:	4c f5       	brge	.+82     	; 0x2dc6 <LCD_displayCharacter+0x864>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e2       	ldi	r20, 0x20	; 32
    2d82:	51 e4       	ldi	r21, 0x41	; 65
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9e 83       	std	Y+6, r25	; 0x06
    2d9a:	8d 83       	std	Y+5, r24	; 0x05
    2d9c:	0f c0       	rjmp	.+30     	; 0x2dbc <LCD_displayCharacter+0x85a>
    2d9e:	88 ec       	ldi	r24, 0xC8	; 200
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	9c 83       	std	Y+4, r25	; 0x04
    2da4:	8b 83       	std	Y+3, r24	; 0x03
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	9c 81       	ldd	r25, Y+4	; 0x04
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <LCD_displayCharacter+0x848>
    2dae:	9c 83       	std	Y+4, r25	; 0x04
    2db0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db2:	8d 81       	ldd	r24, Y+5	; 0x05
    2db4:	9e 81       	ldd	r25, Y+6	; 0x06
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	9e 83       	std	Y+6, r25	; 0x06
    2dba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	69 f7       	brne	.-38     	; 0x2d9e <LCD_displayCharacter+0x83c>
    2dc4:	14 c0       	rjmp	.+40     	; 0x2dee <LCD_displayCharacter+0x88c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	78 85       	ldd	r23, Y+8	; 0x08
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
    2dda:	8d 81       	ldd	r24, Y+5	; 0x05
    2ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dde:	9a 83       	std	Y+2, r25	; 0x02
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	9a 81       	ldd	r25, Y+2	; 0x02
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <LCD_displayCharacter+0x884>
    2dea:	9a 83       	std	Y+2, r25	; 0x02
    2dec:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2dee:	cd 59       	subi	r28, 0x9D	; 157
    2df0:	df 4f       	sbci	r29, 0xFF	; 255
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	de bf       	out	0x3e, r29	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	cd bf       	out	0x3d, r28	; 61
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	1f 91       	pop	r17
    2e02:	0f 91       	pop	r16
    2e04:	08 95       	ret

00002e06 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <LCD_displayString+0x6>
    2e0c:	0f 92       	push	r0
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	9b 83       	std	Y+3, r25	; 0x03
    2e14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e16:	19 82       	std	Y+1, r1	; 0x01
    2e18:	0e c0       	rjmp	.+28     	; 0x2e36 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	28 2f       	mov	r18, r24
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	9b 81       	ldd	r25, Y+3	; 0x03
    2e24:	fc 01       	movw	r30, r24
    2e26:	e2 0f       	add	r30, r18
    2e28:	f3 1f       	adc	r31, r19
    2e2a:	80 81       	ld	r24, Z
    2e2c:	0e 94 b1 12 	call	0x2562	; 0x2562 <LCD_displayCharacter>
		i++;
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	8f 5f       	subi	r24, 0xFF	; 255
    2e34:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e40:	fc 01       	movw	r30, r24
    2e42:	e2 0f       	add	r30, r18
    2e44:	f3 1f       	adc	r31, r19
    2e46:	80 81       	ld	r24, Z
    2e48:	88 23       	and	r24, r24
    2e4a:	39 f7       	brne	.-50     	; 0x2e1a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	08 95       	ret

00002e58 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	00 d0       	rcall	.+0      	; 0x2e5e <LCD_moveCursor+0x6>
    2e5e:	00 d0       	rcall	.+0      	; 0x2e60 <LCD_moveCursor+0x8>
    2e60:	0f 92       	push	r0
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	8a 83       	std	Y+2, r24	; 0x02
    2e68:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6c:	28 2f       	mov	r18, r24
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	3d 83       	std	Y+5, r19	; 0x05
    2e72:	2c 83       	std	Y+4, r18	; 0x04
    2e74:	8c 81       	ldd	r24, Y+4	; 0x04
    2e76:	9d 81       	ldd	r25, Y+5	; 0x05
    2e78:	81 30       	cpi	r24, 0x01	; 1
    2e7a:	91 05       	cpc	r25, r1
    2e7c:	c1 f0       	breq	.+48     	; 0x2eae <LCD_moveCursor+0x56>
    2e7e:	2c 81       	ldd	r18, Y+4	; 0x04
    2e80:	3d 81       	ldd	r19, Y+5	; 0x05
    2e82:	22 30       	cpi	r18, 0x02	; 2
    2e84:	31 05       	cpc	r19, r1
    2e86:	2c f4       	brge	.+10     	; 0x2e92 <LCD_moveCursor+0x3a>
    2e88:	8c 81       	ldd	r24, Y+4	; 0x04
    2e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	61 f0       	breq	.+24     	; 0x2ea8 <LCD_moveCursor+0x50>
    2e90:	19 c0       	rjmp	.+50     	; 0x2ec4 <LCD_moveCursor+0x6c>
    2e92:	2c 81       	ldd	r18, Y+4	; 0x04
    2e94:	3d 81       	ldd	r19, Y+5	; 0x05
    2e96:	22 30       	cpi	r18, 0x02	; 2
    2e98:	31 05       	cpc	r19, r1
    2e9a:	69 f0       	breq	.+26     	; 0x2eb6 <LCD_moveCursor+0x5e>
    2e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea0:	83 30       	cpi	r24, 0x03	; 3
    2ea2:	91 05       	cpc	r25, r1
    2ea4:	61 f0       	breq	.+24     	; 0x2ebe <LCD_moveCursor+0x66>
    2ea6:	0e c0       	rjmp	.+28     	; 0x2ec4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eaa:	89 83       	std	Y+1, r24	; 0x01
    2eac:	0b c0       	rjmp	.+22     	; 0x2ec4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	80 5c       	subi	r24, 0xC0	; 192
    2eb2:	89 83       	std	Y+1, r24	; 0x01
    2eb4:	07 c0       	rjmp	.+14     	; 0x2ec4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	80 5f       	subi	r24, 0xF0	; 240
    2eba:	89 83       	std	Y+1, r24	; 0x01
    2ebc:	03 c0       	rjmp	.+6      	; 0x2ec4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec0:	80 5b       	subi	r24, 0xB0	; 176
    2ec2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	80 68       	ori	r24, 0x80	; 128
    2ec8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_sendCommand>
}
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	08 95       	ret

00002edc <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2edc:	df 93       	push	r29
    2ede:	cf 93       	push	r28
    2ee0:	00 d0       	rcall	.+0      	; 0x2ee2 <LCD_displayStringRowColumn+0x6>
    2ee2:	00 d0       	rcall	.+0      	; 0x2ee4 <LCD_displayStringRowColumn+0x8>
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	89 83       	std	Y+1, r24	; 0x01
    2eea:	6a 83       	std	Y+2, r22	; 0x02
    2eec:	5c 83       	std	Y+4, r21	; 0x04
    2eee:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	6a 81       	ldd	r22, Y+2	; 0x02
    2ef4:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	9c 81       	ldd	r25, Y+4	; 0x04
    2efc:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
}
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	0f 90       	pop	r0
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	62 97       	sbiw	r28, 0x12	; 18
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	9a 8b       	std	Y+18, r25	; 0x12
    2f24:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f26:	89 89       	ldd	r24, Y+17	; 0x11
    2f28:	9a 89       	ldd	r25, Y+18	; 0x12
    2f2a:	9e 01       	movw	r18, r28
    2f2c:	2f 5f       	subi	r18, 0xFF	; 255
    2f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f30:	b9 01       	movw	r22, r18
    2f32:	4a e0       	ldi	r20, 0x0A	; 10
    2f34:	50 e0       	ldi	r21, 0x00	; 0
    2f36:	0e 94 b2 1a 	call	0x3564	; 0x3564 <itoa>
   LCD_displayString(buff); /* Display the string */
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	01 96       	adiw	r24, 0x01	; 1
    2f3e:	0e 94 03 17 	call	0x2e06	; 0x2e06 <LCD_displayString>
}
    2f42:	62 96       	adiw	r28, 0x12	; 18
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <LCD_sendCommand>
}
    2f62:	cf 91       	pop	r28
    2f64:	df 91       	pop	r29
    2f66:	08 95       	ret

00002f68 <Timer1_init>:

void (*CallBack_Ptr)(void) = NULL_PTR; // Initialize a function pointer to NULL

// Initialize Timer1 with the provided configuration
void Timer1_init(const Timer1_ConfigType *Config_Ptr)
{
    2f68:	df 93       	push	r29
    2f6a:	cf 93       	push	r28
    2f6c:	00 d0       	rcall	.+0      	; 0x2f6e <Timer1_init+0x6>
    2f6e:	cd b7       	in	r28, 0x3d	; 61
    2f70:	de b7       	in	r29, 0x3e	; 62
    2f72:	9a 83       	std	Y+2, r25	; 0x02
    2f74:	89 83       	std	Y+1, r24	; 0x01
    // Check if the mode is CTC Mode
    if (Config_Ptr->mode == CTC_Mode) {
    2f76:	e9 81       	ldd	r30, Y+1	; 0x01
    2f78:	fa 81       	ldd	r31, Y+2	; 0x02
    2f7a:	85 81       	ldd	r24, Z+5	; 0x05
    2f7c:	84 30       	cpi	r24, 0x04	; 4
    2f7e:	91 f5       	brne	.+100    	; 0x2fe4 <Timer1_init+0x7c>
        SET_BIT(TCCR1A, FOC1A);  // Set Force Output Compare A (FOC1A) bit
    2f80:	af e4       	ldi	r26, 0x4F	; 79
    2f82:	b0 e0       	ldi	r27, 0x00	; 0
    2f84:	ef e4       	ldi	r30, 0x4F	; 79
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	88 60       	ori	r24, 0x08	; 8
    2f8c:	8c 93       	st	X, r24
        SET_BIT(TCCR1B, WGM12);  // Set Waveform Generation Mode (WGM12) bit
    2f8e:	ae e4       	ldi	r26, 0x4E	; 78
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	ee e4       	ldi	r30, 0x4E	; 78
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	88 60       	ori	r24, 0x08	; 8
    2f9a:	8c 93       	st	X, r24
        TCCR1B |= Config_Ptr->prescaler; // Set the prescaler value
    2f9c:	ae e4       	ldi	r26, 0x4E	; 78
    2f9e:	b0 e0       	ldi	r27, 0x00	; 0
    2fa0:	ee e4       	ldi	r30, 0x4E	; 78
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	90 81       	ld	r25, Z
    2fa6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fa8:	fa 81       	ldd	r31, Y+2	; 0x02
    2faa:	84 81       	ldd	r24, Z+4	; 0x04
    2fac:	89 2b       	or	r24, r25
    2fae:	8c 93       	st	X, r24
        TCNT1 = Config_Ptr->intial_value; // Set the initial value of the timer
    2fb0:	ac e4       	ldi	r26, 0x4C	; 76
    2fb2:	b0 e0       	ldi	r27, 0x00	; 0
    2fb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2fb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2fb8:	80 81       	ld	r24, Z
    2fba:	91 81       	ldd	r25, Z+1	; 0x01
    2fbc:	11 96       	adiw	r26, 0x01	; 1
    2fbe:	9c 93       	st	X, r25
    2fc0:	8e 93       	st	-X, r24
        OCR1A = Config_Ptr->compare_value; // Set the compare value for generating interrupts
    2fc2:	aa e4       	ldi	r26, 0x4A	; 74
    2fc4:	b0 e0       	ldi	r27, 0x00	; 0
    2fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2fca:	82 81       	ldd	r24, Z+2	; 0x02
    2fcc:	93 81       	ldd	r25, Z+3	; 0x03
    2fce:	11 96       	adiw	r26, 0x01	; 1
    2fd0:	9c 93       	st	X, r25
    2fd2:	8e 93       	st	-X, r24
        SET_BIT(TIMSK, OCIE1A); // Enable Output Compare A Match interrupt
    2fd4:	a9 e5       	ldi	r26, 0x59	; 89
    2fd6:	b0 e0       	ldi	r27, 0x00	; 0
    2fd8:	e9 e5       	ldi	r30, 0x59	; 89
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	80 81       	ld	r24, Z
    2fde:	80 61       	ori	r24, 0x10	; 16
    2fe0:	8c 93       	st	X, r24
    2fe2:	21 c0       	rjmp	.+66     	; 0x3026 <Timer1_init+0xbe>
    } else {
        SET_BIT(TCCR1A, FOC1A); // Set Force Output Compare A (FOC1A) bit
    2fe4:	af e4       	ldi	r26, 0x4F	; 79
    2fe6:	b0 e0       	ldi	r27, 0x00	; 0
    2fe8:	ef e4       	ldi	r30, 0x4F	; 79
    2fea:	f0 e0       	ldi	r31, 0x00	; 0
    2fec:	80 81       	ld	r24, Z
    2fee:	88 60       	ori	r24, 0x08	; 8
    2ff0:	8c 93       	st	X, r24
        TCCR1B |= Config_Ptr->prescaler; // Set the prescaler value
    2ff2:	ae e4       	ldi	r26, 0x4E	; 78
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	ee e4       	ldi	r30, 0x4E	; 78
    2ff8:	f0 e0       	ldi	r31, 0x00	; 0
    2ffa:	90 81       	ld	r25, Z
    2ffc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ffe:	fa 81       	ldd	r31, Y+2	; 0x02
    3000:	84 81       	ldd	r24, Z+4	; 0x04
    3002:	89 2b       	or	r24, r25
    3004:	8c 93       	st	X, r24
        TCNT1 = Config_Ptr->intial_value; // Set the initial value of the timer
    3006:	ac e4       	ldi	r26, 0x4C	; 76
    3008:	b0 e0       	ldi	r27, 0x00	; 0
    300a:	e9 81       	ldd	r30, Y+1	; 0x01
    300c:	fa 81       	ldd	r31, Y+2	; 0x02
    300e:	80 81       	ld	r24, Z
    3010:	91 81       	ldd	r25, Z+1	; 0x01
    3012:	11 96       	adiw	r26, 0x01	; 1
    3014:	9c 93       	st	X, r25
    3016:	8e 93       	st	-X, r24
        SET_BIT(TIMSK, TOIE1); // Enable Timer Overflow interrupt
    3018:	a9 e5       	ldi	r26, 0x59	; 89
    301a:	b0 e0       	ldi	r27, 0x00	; 0
    301c:	e9 e5       	ldi	r30, 0x59	; 89
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	80 81       	ld	r24, Z
    3022:	84 60       	ori	r24, 0x04	; 4
    3024:	8c 93       	st	X, r24
    }
}
    3026:	0f 90       	pop	r0
    3028:	0f 90       	pop	r0
    302a:	cf 91       	pop	r28
    302c:	df 91       	pop	r29
    302e:	08 95       	ret

00003030 <Timer1_deInit>:

// Deinitialize Timer1 by resetting its registers and callback function pointer
void Timer1_deInit(void)
{
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
    TCCR1A = 0; // Reset Timer Control Register A
    3038:	ef e4       	ldi	r30, 0x4F	; 79
    303a:	f0 e0       	ldi	r31, 0x00	; 0
    303c:	10 82       	st	Z, r1
    TIMSK = 0;  // Reset Timer Interrupt Mask Register
    303e:	e9 e5       	ldi	r30, 0x59	; 89
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	10 82       	st	Z, r1
    CallBack_Ptr = NULL_PTR; // Set the callback function pointer to NULL
    3044:	10 92 06 01 	sts	0x0106, r1
    3048:	10 92 05 01 	sts	0x0105, r1
}
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	08 95       	ret

00003052 <Timer1_setCallBack>:

// Set a callback function to be called on timer events
void Timer1_setCallBack(void(*a_ptr)(void))
{
    3052:	df 93       	push	r29
    3054:	cf 93       	push	r28
    3056:	00 d0       	rcall	.+0      	; 0x3058 <Timer1_setCallBack+0x6>
    3058:	cd b7       	in	r28, 0x3d	; 61
    305a:	de b7       	in	r29, 0x3e	; 62
    305c:	9a 83       	std	Y+2, r25	; 0x02
    305e:	89 83       	std	Y+1, r24	; 0x01
    CallBack_Ptr = a_ptr; // Set the callback function pointer
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	9a 81       	ldd	r25, Y+2	; 0x02
    3064:	90 93 06 01 	sts	0x0106, r25
    3068:	80 93 05 01 	sts	0x0105, r24
}
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	cf 91       	pop	r28
    3072:	df 91       	pop	r29
    3074:	08 95       	ret

00003076 <__vector_7>:

// Interrupt Service Routine (ISR) for the Timer1 Output Compare A Match
ISR(TIMER1_COMPA_vect)
{
    3076:	1f 92       	push	r1
    3078:	0f 92       	push	r0
    307a:	0f b6       	in	r0, 0x3f	; 63
    307c:	0f 92       	push	r0
    307e:	11 24       	eor	r1, r1
    3080:	2f 93       	push	r18
    3082:	3f 93       	push	r19
    3084:	4f 93       	push	r20
    3086:	5f 93       	push	r21
    3088:	6f 93       	push	r22
    308a:	7f 93       	push	r23
    308c:	8f 93       	push	r24
    308e:	9f 93       	push	r25
    3090:	af 93       	push	r26
    3092:	bf 93       	push	r27
    3094:	ef 93       	push	r30
    3096:	ff 93       	push	r31
    3098:	df 93       	push	r29
    309a:	cf 93       	push	r28
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0; // Reset the timer
    30a0:	ec e4       	ldi	r30, 0x4C	; 76
    30a2:	f0 e0       	ldi	r31, 0x00	; 0
    30a4:	11 82       	std	Z+1, r1	; 0x01
    30a6:	10 82       	st	Z, r1
    if (CallBack_Ptr != NULL_PTR) {
    30a8:	80 91 05 01 	lds	r24, 0x0105
    30ac:	90 91 06 01 	lds	r25, 0x0106
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	29 f0       	breq	.+10     	; 0x30be <__vector_7+0x48>
        CallBack_Ptr(); // Call the callback function if it is not NULL
    30b4:	e0 91 05 01 	lds	r30, 0x0105
    30b8:	f0 91 06 01 	lds	r31, 0x0106
    30bc:	09 95       	icall
    }
}
    30be:	cf 91       	pop	r28
    30c0:	df 91       	pop	r29
    30c2:	ff 91       	pop	r31
    30c4:	ef 91       	pop	r30
    30c6:	bf 91       	pop	r27
    30c8:	af 91       	pop	r26
    30ca:	9f 91       	pop	r25
    30cc:	8f 91       	pop	r24
    30ce:	7f 91       	pop	r23
    30d0:	6f 91       	pop	r22
    30d2:	5f 91       	pop	r21
    30d4:	4f 91       	pop	r20
    30d6:	3f 91       	pop	r19
    30d8:	2f 91       	pop	r18
    30da:	0f 90       	pop	r0
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	0f 90       	pop	r0
    30e0:	1f 90       	pop	r1
    30e2:	18 95       	reti

000030e4 <__vector_9>:

// Interrupt Service Routine (ISR) for the Timer1 Overflow
ISR(TIMER1_OVF_vect)
{
    30e4:	1f 92       	push	r1
    30e6:	0f 92       	push	r0
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	0f 92       	push	r0
    30ec:	11 24       	eor	r1, r1
    30ee:	2f 93       	push	r18
    30f0:	3f 93       	push	r19
    30f2:	4f 93       	push	r20
    30f4:	5f 93       	push	r21
    30f6:	6f 93       	push	r22
    30f8:	7f 93       	push	r23
    30fa:	8f 93       	push	r24
    30fc:	9f 93       	push	r25
    30fe:	af 93       	push	r26
    3100:	bf 93       	push	r27
    3102:	ef 93       	push	r30
    3104:	ff 93       	push	r31
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
    TCNT1 = 0; // Reset the timer
    310e:	ec e4       	ldi	r30, 0x4C	; 76
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	11 82       	std	Z+1, r1	; 0x01
    3114:	10 82       	st	Z, r1
    if (CallBack_Ptr != NULL_PTR) {
    3116:	80 91 05 01 	lds	r24, 0x0105
    311a:	90 91 06 01 	lds	r25, 0x0106
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	29 f0       	breq	.+10     	; 0x312c <__vector_9+0x48>
        CallBack_Ptr(); // Call the callback function if it is not NULL
    3122:	e0 91 05 01 	lds	r30, 0x0105
    3126:	f0 91 06 01 	lds	r31, 0x0106
    312a:	09 95       	icall
    }
}
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	ff 91       	pop	r31
    3132:	ef 91       	pop	r30
    3134:	bf 91       	pop	r27
    3136:	af 91       	pop	r26
    3138:	9f 91       	pop	r25
    313a:	8f 91       	pop	r24
    313c:	7f 91       	pop	r23
    313e:	6f 91       	pop	r22
    3140:	5f 91       	pop	r21
    3142:	4f 91       	pop	r20
    3144:	3f 91       	pop	r19
    3146:	2f 91       	pop	r18
    3148:	0f 90       	pop	r0
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	0f 90       	pop	r0
    314e:	1f 90       	pop	r1
    3150:	18 95       	reti

00003152 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    3152:	df 93       	push	r29
    3154:	cf 93       	push	r28
    3156:	00 d0       	rcall	.+0      	; 0x3158 <UART_init+0x6>
    3158:	00 d0       	rcall	.+0      	; 0x315a <UART_init+0x8>
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	9c 83       	std	Y+4, r25	; 0x04
    3160:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3162:	1a 82       	std	Y+2, r1	; 0x02
    3164:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3166:	eb e2       	ldi	r30, 0x2B	; 43
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	82 e0       	ldi	r24, 0x02	; 2
    316c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    316e:	ea e2       	ldi	r30, 0x2A	; 42
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	88 e1       	ldi	r24, 0x18	; 24
    3174:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    3176:	e0 e4       	ldi	r30, 0x40	; 64
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 e8       	ldi	r24, 0x80	; 128
    317c:	80 83       	st	Z, r24
	if(Config_Ptr->bit_data==Five_Bit){
    317e:	eb 81       	ldd	r30, Y+3	; 0x03
    3180:	fc 81       	ldd	r31, Y+4	; 0x04
    3182:	80 81       	ld	r24, Z
    3184:	88 23       	and	r24, r24
    3186:	b1 f4       	brne	.+44     	; 0x31b4 <UART_init+0x62>
		CLEAR_BIT(UCSRB,UCSZ2);
    3188:	aa e2       	ldi	r26, 0x2A	; 42
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	ea e2       	ldi	r30, 0x2A	; 42
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	8b 7f       	andi	r24, 0xFB	; 251
    3194:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    3196:	a0 e4       	ldi	r26, 0x40	; 64
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	e0 e4       	ldi	r30, 0x40	; 64
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	8b 7f       	andi	r24, 0xFB	; 251
    31a2:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ0);
    31a4:	a0 e4       	ldi	r26, 0x40	; 64
    31a6:	b0 e0       	ldi	r27, 0x00	; 0
    31a8:	e0 e4       	ldi	r30, 0x40	; 64
    31aa:	f0 e0       	ldi	r31, 0x00	; 0
    31ac:	80 81       	ld	r24, Z
    31ae:	8d 7f       	andi	r24, 0xFD	; 253
    31b0:	8c 93       	st	X, r24
    31b2:	66 c0       	rjmp	.+204    	; 0x3280 <UART_init+0x12e>
	}
	else if(Config_Ptr->bit_data ==Six_Bit){
    31b4:	eb 81       	ldd	r30, Y+3	; 0x03
    31b6:	fc 81       	ldd	r31, Y+4	; 0x04
    31b8:	80 81       	ld	r24, Z
    31ba:	81 30       	cpi	r24, 0x01	; 1
    31bc:	b1 f4       	brne	.+44     	; 0x31ea <UART_init+0x98>
		CLEAR_BIT(UCSRB,UCSZ2);
    31be:	aa e2       	ldi	r26, 0x2A	; 42
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	ea e2       	ldi	r30, 0x2A	; 42
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	80 81       	ld	r24, Z
    31c8:	8b 7f       	andi	r24, 0xFB	; 251
    31ca:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ1);
    31cc:	a0 e4       	ldi	r26, 0x40	; 64
    31ce:	b0 e0       	ldi	r27, 0x00	; 0
    31d0:	e0 e4       	ldi	r30, 0x40	; 64
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	8b 7f       	andi	r24, 0xFB	; 251
    31d8:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    31da:	a0 e4       	ldi	r26, 0x40	; 64
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	e0 e4       	ldi	r30, 0x40	; 64
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	82 60       	ori	r24, 0x02	; 2
    31e6:	8c 93       	st	X, r24
    31e8:	4b c0       	rjmp	.+150    	; 0x3280 <UART_init+0x12e>
	}
	else if(Config_Ptr->bit_data==Seven_Bit){
    31ea:	eb 81       	ldd	r30, Y+3	; 0x03
    31ec:	fc 81       	ldd	r31, Y+4	; 0x04
    31ee:	80 81       	ld	r24, Z
    31f0:	82 30       	cpi	r24, 0x02	; 2
    31f2:	b1 f4       	brne	.+44     	; 0x3220 <UART_init+0xce>
		CLEAR_BIT(UCSRB,UCSZ2);
    31f4:	aa e2       	ldi	r26, 0x2A	; 42
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	ea e2       	ldi	r30, 0x2A	; 42
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	8b 7f       	andi	r24, 0xFB	; 251
    3200:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    3202:	a0 e4       	ldi	r26, 0x40	; 64
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	e0 e4       	ldi	r30, 0x40	; 64
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	84 60       	ori	r24, 0x04	; 4
    320e:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UCSZ0);
    3210:	a0 e4       	ldi	r26, 0x40	; 64
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	e0 e4       	ldi	r30, 0x40	; 64
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	80 81       	ld	r24, Z
    321a:	8d 7f       	andi	r24, 0xFD	; 253
    321c:	8c 93       	st	X, r24
    321e:	30 c0       	rjmp	.+96     	; 0x3280 <UART_init+0x12e>
	}
	else if(Config_Ptr->bit_data==Eight_Bit){
    3220:	eb 81       	ldd	r30, Y+3	; 0x03
    3222:	fc 81       	ldd	r31, Y+4	; 0x04
    3224:	80 81       	ld	r24, Z
    3226:	83 30       	cpi	r24, 0x03	; 3
    3228:	b1 f4       	brne	.+44     	; 0x3256 <UART_init+0x104>
		CLEAR_BIT(UCSRB,UCSZ2);
    322a:	aa e2       	ldi	r26, 0x2A	; 42
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	ea e2       	ldi	r30, 0x2A	; 42
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	8b 7f       	andi	r24, 0xFB	; 251
    3236:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    3238:	a0 e4       	ldi	r26, 0x40	; 64
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	e0 e4       	ldi	r30, 0x40	; 64
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	80 81       	ld	r24, Z
    3242:	84 60       	ori	r24, 0x04	; 4
    3244:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    3246:	a0 e4       	ldi	r26, 0x40	; 64
    3248:	b0 e0       	ldi	r27, 0x00	; 0
    324a:	e0 e4       	ldi	r30, 0x40	; 64
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	80 81       	ld	r24, Z
    3250:	82 60       	ori	r24, 0x02	; 2
    3252:	8c 93       	st	X, r24
    3254:	15 c0       	rjmp	.+42     	; 0x3280 <UART_init+0x12e>
	}
	else{
		SET_BIT(UCSRB,UCSZ2);
    3256:	aa e2       	ldi	r26, 0x2A	; 42
    3258:	b0 e0       	ldi	r27, 0x00	; 0
    325a:	ea e2       	ldi	r30, 0x2A	; 42
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	84 60       	ori	r24, 0x04	; 4
    3262:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ1);
    3264:	a0 e4       	ldi	r26, 0x40	; 64
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	e0 e4       	ldi	r30, 0x40	; 64
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	84 60       	ori	r24, 0x04	; 4
    3270:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UCSZ0);
    3272:	a0 e4       	ldi	r26, 0x40	; 64
    3274:	b0 e0       	ldi	r27, 0x00	; 0
    3276:	e0 e4       	ldi	r30, 0x40	; 64
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	80 81       	ld	r24, Z
    327c:	82 60       	ori	r24, 0x02	; 2
    327e:	8c 93       	st	X, r24
	}


	if(Config_Ptr->stop_bit==One_Bit){
    3280:	eb 81       	ldd	r30, Y+3	; 0x03
    3282:	fc 81       	ldd	r31, Y+4	; 0x04
    3284:	82 81       	ldd	r24, Z+2	; 0x02
    3286:	88 23       	and	r24, r24
    3288:	41 f4       	brne	.+16     	; 0x329a <UART_init+0x148>
		CLEAR_BIT(UCSRC,USBS);
    328a:	a0 e4       	ldi	r26, 0x40	; 64
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	e0 e4       	ldi	r30, 0x40	; 64
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	87 7f       	andi	r24, 0xF7	; 247
    3296:	8c 93       	st	X, r24
    3298:	0c c0       	rjmp	.+24     	; 0x32b2 <UART_init+0x160>
	}
	else if(Config_Ptr->stop_bit==Two_Bit){
    329a:	eb 81       	ldd	r30, Y+3	; 0x03
    329c:	fc 81       	ldd	r31, Y+4	; 0x04
    329e:	82 81       	ldd	r24, Z+2	; 0x02
    32a0:	81 30       	cpi	r24, 0x01	; 1
    32a2:	39 f4       	brne	.+14     	; 0x32b2 <UART_init+0x160>
		SET_BIT(UCSRC,USBS);
    32a4:	a0 e4       	ldi	r26, 0x40	; 64
    32a6:	b0 e0       	ldi	r27, 0x00	; 0
    32a8:	e0 e4       	ldi	r30, 0x40	; 64
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	88 60       	ori	r24, 0x08	; 8
    32b0:	8c 93       	st	X, r24
	}

	if(Config_Ptr->parity==Disabled){
    32b2:	eb 81       	ldd	r30, Y+3	; 0x03
    32b4:	fc 81       	ldd	r31, Y+4	; 0x04
    32b6:	81 81       	ldd	r24, Z+1	; 0x01
    32b8:	88 23       	and	r24, r24
    32ba:	79 f4       	brne	.+30     	; 0x32da <UART_init+0x188>
		CLEAR_BIT(UCSRC,UPM0);
    32bc:	a0 e4       	ldi	r26, 0x40	; 64
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e0 e4       	ldi	r30, 0x40	; 64
    32c2:	f0 e0       	ldi	r31, 0x00	; 0
    32c4:	80 81       	ld	r24, Z
    32c6:	8f 7e       	andi	r24, 0xEF	; 239
    32c8:	8c 93       	st	X, r24
		CLEAR_BIT(UCSRC,UPM1);
    32ca:	a0 e4       	ldi	r26, 0x40	; 64
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	e0 e4       	ldi	r30, 0x40	; 64
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	8f 7d       	andi	r24, 0xDF	; 223
    32d6:	8c 93       	st	X, r24
    32d8:	27 c0       	rjmp	.+78     	; 0x3328 <UART_init+0x1d6>
	}
	else if(Config_Ptr->parity==Enabled_Even_Parity){
    32da:	eb 81       	ldd	r30, Y+3	; 0x03
    32dc:	fc 81       	ldd	r31, Y+4	; 0x04
    32de:	81 81       	ldd	r24, Z+1	; 0x01
    32e0:	82 30       	cpi	r24, 0x02	; 2
    32e2:	79 f4       	brne	.+30     	; 0x3302 <UART_init+0x1b0>
		CLEAR_BIT(UCSRC,UPM0);
    32e4:	a0 e4       	ldi	r26, 0x40	; 64
    32e6:	b0 e0       	ldi	r27, 0x00	; 0
    32e8:	e0 e4       	ldi	r30, 0x40	; 64
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	80 81       	ld	r24, Z
    32ee:	8f 7e       	andi	r24, 0xEF	; 239
    32f0:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
    32f2:	a0 e4       	ldi	r26, 0x40	; 64
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	e0 e4       	ldi	r30, 0x40	; 64
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	80 62       	ori	r24, 0x20	; 32
    32fe:	8c 93       	st	X, r24
    3300:	13 c0       	rjmp	.+38     	; 0x3328 <UART_init+0x1d6>
	}
	else if(Config_Ptr->parity==Enabled_Odd_Parity){
    3302:	eb 81       	ldd	r30, Y+3	; 0x03
    3304:	fc 81       	ldd	r31, Y+4	; 0x04
    3306:	81 81       	ldd	r24, Z+1	; 0x01
    3308:	83 30       	cpi	r24, 0x03	; 3
    330a:	71 f4       	brne	.+28     	; 0x3328 <UART_init+0x1d6>
		SET_BIT(UCSRC,UPM0);
    330c:	a0 e4       	ldi	r26, 0x40	; 64
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	e0 e4       	ldi	r30, 0x40	; 64
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	80 61       	ori	r24, 0x10	; 16
    3318:	8c 93       	st	X, r24
		SET_BIT(UCSRC,UPM1);
    331a:	a0 e4       	ldi	r26, 0x40	; 64
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	e0 e4       	ldi	r30, 0x40	; 64
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	80 62       	ori	r24, 0x20	; 32
    3326:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3328:	eb 81       	ldd	r30, Y+3	; 0x03
    332a:	fc 81       	ldd	r31, Y+4	; 0x04
    332c:	83 81       	ldd	r24, Z+3	; 0x03
    332e:	94 81       	ldd	r25, Z+4	; 0x04
    3330:	a5 81       	ldd	r26, Z+5	; 0x05
    3332:	b6 81       	ldd	r27, Z+6	; 0x06
    3334:	88 0f       	add	r24, r24
    3336:	99 1f       	adc	r25, r25
    3338:	aa 1f       	adc	r26, r26
    333a:	bb 1f       	adc	r27, r27
    333c:	88 0f       	add	r24, r24
    333e:	99 1f       	adc	r25, r25
    3340:	aa 1f       	adc	r26, r26
    3342:	bb 1f       	adc	r27, r27
    3344:	88 0f       	add	r24, r24
    3346:	99 1f       	adc	r25, r25
    3348:	aa 1f       	adc	r26, r26
    334a:	bb 1f       	adc	r27, r27
    334c:	9c 01       	movw	r18, r24
    334e:	ad 01       	movw	r20, r26
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	92 e1       	ldi	r25, 0x12	; 18
    3354:	aa e7       	ldi	r26, 0x7A	; 122
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	bc 01       	movw	r22, r24
    335a:	cd 01       	movw	r24, r26
    335c:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__udivmodsi4>
    3360:	da 01       	movw	r26, r20
    3362:	c9 01       	movw	r24, r18
    3364:	01 97       	sbiw	r24, 0x01	; 1
    3366:	9a 83       	std	Y+2, r25	; 0x02
    3368:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    336a:	e0 e4       	ldi	r30, 0x40	; 64
    336c:	f0 e0       	ldi	r31, 0x00	; 0
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	9a 81       	ldd	r25, Y+2	; 0x02
    3372:	89 2f       	mov	r24, r25
    3374:	99 27       	eor	r25, r25
    3376:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3378:	e9 e2       	ldi	r30, 0x29	; 41
    337a:	f0 e0       	ldi	r31, 0x00	; 0
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	80 83       	st	Z, r24
}
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	08 95       	ret

0000338e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	0f 92       	push	r0
    3394:	cd b7       	in	r28, 0x3d	; 61
    3396:	de b7       	in	r29, 0x3e	; 62
    3398:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    339a:	eb e2       	ldi	r30, 0x2B	; 43
    339c:	f0 e0       	ldi	r31, 0x00	; 0
    339e:	80 81       	ld	r24, Z
    33a0:	88 2f       	mov	r24, r24
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	80 72       	andi	r24, 0x20	; 32
    33a6:	90 70       	andi	r25, 0x00	; 0
    33a8:	00 97       	sbiw	r24, 0x00	; 0
    33aa:	b9 f3       	breq	.-18     	; 0x339a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    33ac:	ec e2       	ldi	r30, 0x2C	; 44
    33ae:	f0 e0       	ldi	r31, 0x00	; 0
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    33b4:	0f 90       	pop	r0
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    33c4:	eb e2       	ldi	r30, 0x2B	; 43
    33c6:	f0 e0       	ldi	r31, 0x00	; 0
    33c8:	80 81       	ld	r24, Z
    33ca:	88 23       	and	r24, r24
    33cc:	dc f7       	brge	.-10     	; 0x33c4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    33ce:	ec e2       	ldi	r30, 0x2C	; 44
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	80 81       	ld	r24, Z
}
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	08 95       	ret

000033da <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    33da:	df 93       	push	r29
    33dc:	cf 93       	push	r28
    33de:	00 d0       	rcall	.+0      	; 0x33e0 <UART_sendString+0x6>
    33e0:	0f 92       	push	r0
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
    33e6:	9b 83       	std	Y+3, r25	; 0x03
    33e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33ea:	19 82       	std	Y+1, r1	; 0x01
    33ec:	0e c0       	rjmp	.+28     	; 0x340a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	28 2f       	mov	r18, r24
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	9b 81       	ldd	r25, Y+3	; 0x03
    33f8:	fc 01       	movw	r30, r24
    33fa:	e2 0f       	add	r30, r18
    33fc:	f3 1f       	adc	r31, r19
    33fe:	80 81       	ld	r24, Z
    3400:	0e 94 c7 19 	call	0x338e	; 0x338e <UART_sendByte>
		i++;
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	8f 5f       	subi	r24, 0xFF	; 255
    3408:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	28 2f       	mov	r18, r24
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	8a 81       	ldd	r24, Y+2	; 0x02
    3412:	9b 81       	ldd	r25, Y+3	; 0x03
    3414:	fc 01       	movw	r30, r24
    3416:	e2 0f       	add	r30, r18
    3418:	f3 1f       	adc	r31, r19
    341a:	80 81       	ld	r24, Z
    341c:	88 23       	and	r24, r24
    341e:	39 f7       	brne	.-50     	; 0x33ee <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	 *******************************************************************/
}
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    342c:	0f 93       	push	r16
    342e:	1f 93       	push	r17
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	00 d0       	rcall	.+0      	; 0x3436 <UART_receiveString+0xa>
    3436:	0f 92       	push	r0
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	9b 83       	std	Y+3, r25	; 0x03
    343e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3440:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	28 2f       	mov	r18, r24
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	8a 81       	ldd	r24, Y+2	; 0x02
    344a:	9b 81       	ldd	r25, Y+3	; 0x03
    344c:	8c 01       	movw	r16, r24
    344e:	02 0f       	add	r16, r18
    3450:	13 1f       	adc	r17, r19
    3452:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_recieveByte>
    3456:	f8 01       	movw	r30, r16
    3458:	80 83       	st	Z, r24
    345a:	0f c0       	rjmp	.+30     	; 0x347a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	8f 5f       	subi	r24, 0xFF	; 255
    3460:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	28 2f       	mov	r18, r24
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	8a 81       	ldd	r24, Y+2	; 0x02
    346a:	9b 81       	ldd	r25, Y+3	; 0x03
    346c:	8c 01       	movw	r16, r24
    346e:	02 0f       	add	r16, r18
    3470:	13 1f       	adc	r17, r19
    3472:	0e 94 de 19 	call	0x33bc	; 0x33bc <UART_recieveByte>
    3476:	f8 01       	movw	r30, r16
    3478:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	28 2f       	mov	r18, r24
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	8a 81       	ldd	r24, Y+2	; 0x02
    3482:	9b 81       	ldd	r25, Y+3	; 0x03
    3484:	fc 01       	movw	r30, r24
    3486:	e2 0f       	add	r30, r18
    3488:	f3 1f       	adc	r31, r19
    348a:	80 81       	ld	r24, Z
    348c:	83 32       	cpi	r24, 0x23	; 35
    348e:	31 f7       	brne	.-52     	; 0x345c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3490:	89 81       	ldd	r24, Y+1	; 0x01
    3492:	28 2f       	mov	r18, r24
    3494:	30 e0       	ldi	r19, 0x00	; 0
    3496:	8a 81       	ldd	r24, Y+2	; 0x02
    3498:	9b 81       	ldd	r25, Y+3	; 0x03
    349a:	fc 01       	movw	r30, r24
    349c:	e2 0f       	add	r30, r18
    349e:	f3 1f       	adc	r31, r19
    34a0:	10 82       	st	Z, r1
}
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	0f 90       	pop	r0
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	1f 91       	pop	r17
    34ae:	0f 91       	pop	r16
    34b0:	08 95       	ret

000034b2 <__udivmodsi4>:
    34b2:	a1 e2       	ldi	r26, 0x21	; 33
    34b4:	1a 2e       	mov	r1, r26
    34b6:	aa 1b       	sub	r26, r26
    34b8:	bb 1b       	sub	r27, r27
    34ba:	fd 01       	movw	r30, r26
    34bc:	0d c0       	rjmp	.+26     	; 0x34d8 <__udivmodsi4_ep>

000034be <__udivmodsi4_loop>:
    34be:	aa 1f       	adc	r26, r26
    34c0:	bb 1f       	adc	r27, r27
    34c2:	ee 1f       	adc	r30, r30
    34c4:	ff 1f       	adc	r31, r31
    34c6:	a2 17       	cp	r26, r18
    34c8:	b3 07       	cpc	r27, r19
    34ca:	e4 07       	cpc	r30, r20
    34cc:	f5 07       	cpc	r31, r21
    34ce:	20 f0       	brcs	.+8      	; 0x34d8 <__udivmodsi4_ep>
    34d0:	a2 1b       	sub	r26, r18
    34d2:	b3 0b       	sbc	r27, r19
    34d4:	e4 0b       	sbc	r30, r20
    34d6:	f5 0b       	sbc	r31, r21

000034d8 <__udivmodsi4_ep>:
    34d8:	66 1f       	adc	r22, r22
    34da:	77 1f       	adc	r23, r23
    34dc:	88 1f       	adc	r24, r24
    34de:	99 1f       	adc	r25, r25
    34e0:	1a 94       	dec	r1
    34e2:	69 f7       	brne	.-38     	; 0x34be <__udivmodsi4_loop>
    34e4:	60 95       	com	r22
    34e6:	70 95       	com	r23
    34e8:	80 95       	com	r24
    34ea:	90 95       	com	r25
    34ec:	9b 01       	movw	r18, r22
    34ee:	ac 01       	movw	r20, r24
    34f0:	bd 01       	movw	r22, r26
    34f2:	cf 01       	movw	r24, r30
    34f4:	08 95       	ret

000034f6 <__prologue_saves__>:
    34f6:	2f 92       	push	r2
    34f8:	3f 92       	push	r3
    34fa:	4f 92       	push	r4
    34fc:	5f 92       	push	r5
    34fe:	6f 92       	push	r6
    3500:	7f 92       	push	r7
    3502:	8f 92       	push	r8
    3504:	9f 92       	push	r9
    3506:	af 92       	push	r10
    3508:	bf 92       	push	r11
    350a:	cf 92       	push	r12
    350c:	df 92       	push	r13
    350e:	ef 92       	push	r14
    3510:	ff 92       	push	r15
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	cf 93       	push	r28
    3518:	df 93       	push	r29
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
    351e:	ca 1b       	sub	r28, r26
    3520:	db 0b       	sbc	r29, r27
    3522:	0f b6       	in	r0, 0x3f	; 63
    3524:	f8 94       	cli
    3526:	de bf       	out	0x3e, r29	; 62
    3528:	0f be       	out	0x3f, r0	; 63
    352a:	cd bf       	out	0x3d, r28	; 61
    352c:	09 94       	ijmp

0000352e <__epilogue_restores__>:
    352e:	2a 88       	ldd	r2, Y+18	; 0x12
    3530:	39 88       	ldd	r3, Y+17	; 0x11
    3532:	48 88       	ldd	r4, Y+16	; 0x10
    3534:	5f 84       	ldd	r5, Y+15	; 0x0f
    3536:	6e 84       	ldd	r6, Y+14	; 0x0e
    3538:	7d 84       	ldd	r7, Y+13	; 0x0d
    353a:	8c 84       	ldd	r8, Y+12	; 0x0c
    353c:	9b 84       	ldd	r9, Y+11	; 0x0b
    353e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3540:	b9 84       	ldd	r11, Y+9	; 0x09
    3542:	c8 84       	ldd	r12, Y+8	; 0x08
    3544:	df 80       	ldd	r13, Y+7	; 0x07
    3546:	ee 80       	ldd	r14, Y+6	; 0x06
    3548:	fd 80       	ldd	r15, Y+5	; 0x05
    354a:	0c 81       	ldd	r16, Y+4	; 0x04
    354c:	1b 81       	ldd	r17, Y+3	; 0x03
    354e:	aa 81       	ldd	r26, Y+2	; 0x02
    3550:	b9 81       	ldd	r27, Y+1	; 0x01
    3552:	ce 0f       	add	r28, r30
    3554:	d1 1d       	adc	r29, r1
    3556:	0f b6       	in	r0, 0x3f	; 63
    3558:	f8 94       	cli
    355a:	de bf       	out	0x3e, r29	; 62
    355c:	0f be       	out	0x3f, r0	; 63
    355e:	cd bf       	out	0x3d, r28	; 61
    3560:	ed 01       	movw	r28, r26
    3562:	08 95       	ret

00003564 <itoa>:
    3564:	fb 01       	movw	r30, r22
    3566:	9f 01       	movw	r18, r30
    3568:	e8 94       	clt
    356a:	42 30       	cpi	r20, 0x02	; 2
    356c:	c4 f0       	brlt	.+48     	; 0x359e <itoa+0x3a>
    356e:	45 32       	cpi	r20, 0x25	; 37
    3570:	b4 f4       	brge	.+44     	; 0x359e <itoa+0x3a>
    3572:	4a 30       	cpi	r20, 0x0A	; 10
    3574:	29 f4       	brne	.+10     	; 0x3580 <itoa+0x1c>
    3576:	97 fb       	bst	r25, 7
    3578:	1e f4       	brtc	.+6      	; 0x3580 <itoa+0x1c>
    357a:	90 95       	com	r25
    357c:	81 95       	neg	r24
    357e:	9f 4f       	sbci	r25, 0xFF	; 255
    3580:	64 2f       	mov	r22, r20
    3582:	77 27       	eor	r23, r23
    3584:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__udivmodhi4>
    3588:	80 5d       	subi	r24, 0xD0	; 208
    358a:	8a 33       	cpi	r24, 0x3A	; 58
    358c:	0c f0       	brlt	.+2      	; 0x3590 <itoa+0x2c>
    358e:	89 5d       	subi	r24, 0xD9	; 217
    3590:	81 93       	st	Z+, r24
    3592:	cb 01       	movw	r24, r22
    3594:	00 97       	sbiw	r24, 0x00	; 0
    3596:	a1 f7       	brne	.-24     	; 0x3580 <itoa+0x1c>
    3598:	16 f4       	brtc	.+4      	; 0x359e <itoa+0x3a>
    359a:	5d e2       	ldi	r21, 0x2D	; 45
    359c:	51 93       	st	Z+, r21
    359e:	10 82       	st	Z, r1
    35a0:	c9 01       	movw	r24, r18
    35a2:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <strrev>

000035a6 <strrev>:
    35a6:	dc 01       	movw	r26, r24
    35a8:	fc 01       	movw	r30, r24
    35aa:	67 2f       	mov	r22, r23
    35ac:	71 91       	ld	r23, Z+
    35ae:	77 23       	and	r23, r23
    35b0:	e1 f7       	brne	.-8      	; 0x35aa <strrev+0x4>
    35b2:	32 97       	sbiw	r30, 0x02	; 2
    35b4:	04 c0       	rjmp	.+8      	; 0x35be <strrev+0x18>
    35b6:	7c 91       	ld	r23, X
    35b8:	6d 93       	st	X+, r22
    35ba:	70 83       	st	Z, r23
    35bc:	62 91       	ld	r22, -Z
    35be:	ae 17       	cp	r26, r30
    35c0:	bf 07       	cpc	r27, r31
    35c2:	c8 f3       	brcs	.-14     	; 0x35b6 <strrev+0x10>
    35c4:	08 95       	ret

000035c6 <__udivmodhi4>:
    35c6:	aa 1b       	sub	r26, r26
    35c8:	bb 1b       	sub	r27, r27
    35ca:	51 e1       	ldi	r21, 0x11	; 17
    35cc:	07 c0       	rjmp	.+14     	; 0x35dc <__udivmodhi4_ep>

000035ce <__udivmodhi4_loop>:
    35ce:	aa 1f       	adc	r26, r26
    35d0:	bb 1f       	adc	r27, r27
    35d2:	a6 17       	cp	r26, r22
    35d4:	b7 07       	cpc	r27, r23
    35d6:	10 f0       	brcs	.+4      	; 0x35dc <__udivmodhi4_ep>
    35d8:	a6 1b       	sub	r26, r22
    35da:	b7 0b       	sbc	r27, r23

000035dc <__udivmodhi4_ep>:
    35dc:	88 1f       	adc	r24, r24
    35de:	99 1f       	adc	r25, r25
    35e0:	5a 95       	dec	r21
    35e2:	a9 f7       	brne	.-22     	; 0x35ce <__udivmodhi4_loop>
    35e4:	80 95       	com	r24
    35e6:	90 95       	com	r25
    35e8:	bc 01       	movw	r22, r24
    35ea:	cd 01       	movw	r24, r26
    35ec:	08 95       	ret

000035ee <_exit>:
    35ee:	f8 94       	cli

000035f0 <__stop_program>:
    35f0:	ff cf       	rjmp	.-2      	; 0x35f0 <__stop_program>
